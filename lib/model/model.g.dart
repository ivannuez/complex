// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Usuario.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Usuario TABLE
class TableUsuario extends SqfEntityTableBase {
  TableUsuario() {
    // declare properties of EntityTable
    tableName = 'usuarios';
    primaryKeyName = 'idUsuario';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('nombre', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUsuario();
  }
}

// Categoria TABLE
class TableCategoria extends SqfEntityTableBase {
  TableCategoria() {
    // declare properties of EntityTable
    tableName = 'categorias';
    primaryKeyName = 'idCategoria';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('descripcion', DbType.text),
      SqfEntityFieldBase('color', DbType.integer, defaultValue: 0),
      SqfEntityFieldBase('icono', DbType.text),
      SqfEntityFieldBase('tipo', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCategoria();
  }
}

// Cuenta TABLE
class TableCuenta extends SqfEntityTableBase {
  TableCuenta() {
    // declare properties of EntityTable
    tableName = 'cuentas';
    primaryKeyName = 'idCuenta';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('descripcion', DbType.text),
      SqfEntityFieldBase('saldo', DbType.real, defaultValue: 0),
      SqfEntityFieldBase('totalIngreso', DbType.real, defaultValue: 0),
      SqfEntityFieldBase('totalEgreso', DbType.real, defaultValue: 0),
      SqfEntityFieldRelationshipBase(
          TableUsuario.getInstance, DeleteRule.SET_NULL,
          defaultValue: 0, fieldName: 'usuariosIdUsuario'),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCuenta();
  }
}

// DetallesCuenta TABLE
class TableDetallesCuenta extends SqfEntityTableBase {
  TableDetallesCuenta() {
    // declare properties of EntityTable
    tableName = 'detallesCuenta';
    primaryKeyName = 'idDetalleCuenta';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('descripcion', DbType.text),
      SqfEntityFieldBase('fecha', DbType.text),
      SqfEntityFieldBase('monto', DbType.real, defaultValue: 0),
      SqfEntityFieldBase('saldoEnFecha', DbType.real, defaultValue: 0),
      SqfEntityFieldBase('tipoTransaccion', DbType.text),
      SqfEntityFieldRelationshipBase(
          TableCuenta.getInstance, DeleteRule.CASCADE,
          defaultValue: 0, fieldName: 'cuentasIdCuenta'),
      SqfEntityFieldRelationshipBase(
          TableCategoria.getInstance, DeleteRule.SET_NULL,
          defaultValue: 0, fieldName: 'categoriasIdCategoria'),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableDetallesCuenta();
  }
}

// Meta TABLE
class TableMeta extends SqfEntityTableBase {
  TableMeta() {
    // declare properties of EntityTable
    tableName = 'metas';
    primaryKeyName = 'idMeta';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('descripcion', DbType.text),
      SqfEntityFieldBase('fechaInicio', DbType.text),
      SqfEntityFieldBase('fechaFin', DbType.text),
      SqfEntityFieldBase('montoInicial', DbType.real, defaultValue: 0),
      SqfEntityFieldBase('montoFinal', DbType.real, defaultValue: 0),
      SqfEntityFieldBase('color', DbType.text),
      SqfEntityFieldBase('icono', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMeta();
  }
}

// DetallesMeta TABLE
class TableDetallesMeta extends SqfEntityTableBase {
  TableDetallesMeta() {
    // declare properties of EntityTable
    tableName = 'detallesMetas';
    primaryKeyName = 'idDetalleMeta';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('fecha', DbType.text),
      SqfEntityFieldBase('monto', DbType.real, defaultValue: 0),
      SqfEntityFieldRelationshipBase(TableMeta.getInstance, DeleteRule.CASCADE,
          defaultValue: 0, fieldName: 'metasIdMeta'),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableDetallesMeta();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class DbComplex extends SqfEntityModelProvider {
  DbComplex() {
    databaseName = myDbModel.databaseName;
    databaseTables = [
      TableUsuario.getInstance,
      TableCategoria.getInstance,
      TableCuenta.getInstance,
      TableDetallesCuenta.getInstance,
      TableMeta.getInstance,
      TableDetallesMeta.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Usuario
class Usuario {
  Usuario({this.idUsuario, this.nombre, this.isDeleted}) {
    _setDefaultValues();
  }
  Usuario.withFields(this.nombre, this.isDeleted) {
    _setDefaultValues();
  }
  Usuario.withId(this.idUsuario, this.nombre, this.isDeleted) {
    _setDefaultValues();
  }
  Usuario.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    idUsuario = o['idUsuario'] as int;
    if (o['nombre'] != null) nombre = o['nombre'] as String;
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Usuario)
  int idUsuario;
  String nombre;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Usuario)

// COLLECTIONS & VIRTUALS (Usuario)
  /// to load children of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  List<Cuenta> plCuentas;

  /// get Cuenta(s) filtered by usuariosIdUsuario=idUsuario
  CuentaFilterBuilder getCuentas(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Cuenta()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .usuariosIdUsuario
        .equals(idUsuario)
        .and;
  }
// END COLLECTIONS & VIRTUALS (Usuario)

  static const bool _softDeleteActivated = true;
  UsuarioManager __mnUsuario;

  UsuarioManager get _mnUsuario {
    return __mnUsuario = __mnUsuario ?? UsuarioManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = <String, dynamic>{};
    if (idUsuario != null) {
      map['idUsuario'] = idUsuario;
    }
    if (nombre != null) {
      map['nombre'] = nombre;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = <String, dynamic>{};
    if (idUsuario != null) {
      map['idUsuario'] = idUsuario;
    }
    if (nombre != null) {
      map['nombre'] = nombre;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Usuario)
    if (!forQuery) {
      map['Cuentas'] = await getCuentas().toMapList();
    }
// END COLLECTIONS (Usuario)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [idUsuario, nombre, isDeleted];
  }

  static Future<List<Usuario>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Usuario.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Usuario>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Usuario>[];
    try {
      objList = list
          .map((usuario) => Usuario.fromMap(usuario as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Usuario.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<Usuario>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await Usuario.fromMapList(data);
    } 
    */

  static Future<List<Usuario>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields}) async {
    final List<Usuario> objList = <Usuario>[];
    for (final map in data) {
      final obj = Usuario.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plCuentas')) {
          obj.plCuentas = obj.plCuentas ?? await obj.getCuentas().toList();
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Usuario by ID if exist, otherwise returns null
  /// <param name='idUsuario'>Primary Key Value</param>
  /// <returns>returns Usuario if exist, otherwise returns null
  Future<Usuario> getById(int idusuario) async {
    if (idusuario == null) {
      return null;
    }
    Usuario obj;
    final data = await _mnUsuario.getById(idusuario);
    if (data.length != 0) {
      obj = Usuario.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Usuario) object. If the idUsuario field is null, saves as a new record and returns new idUsuario, if idUsuario is not null then updates record

  /// <returns>Returns idUsuario
  Future<int> save() async {
    if (idUsuario == null || idUsuario == 0) {
      idUsuario = await _mnUsuario.insert(this);
    } else {
      idUsuario = await _upsert();
    }

    return idUsuario;
  }

  /// saveAs Usuario. Returns a new Primary Key value of Usuario

  /// <returns>Returns a new Primary Key value of Usuario
  Future<int> saveAs() async {
    idUsuario = null;

    return save();
  }

  /// saveAll method saves the sent List<Usuario> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Usuario> usuarios) async {
    final results = _mnUsuario.saveAll(
        'INSERT OR REPLACE INTO usuarios (idUsuario,  nombre,isDeleted)  VALUES (?,?,?)',
        usuarios);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns idUsuario
  Future<int> _upsert() async {
    try {
      if (await _mnUsuario.rawInsert(
              'INSERT OR REPLACE INTO usuarios (idUsuario,  nombre,isDeleted)  VALUES (?,?,?)',
              [idUsuario, nombre, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Usuario idUsuario=$idUsuario updated successfuly');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Usuario idUsuario=$idUsuario did not update');
      }
      return idUsuario;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Usuario Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Usuario>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Usuario> usuarios) async {
    final results = await _mnUsuario.rawInsertAll(
        'INSERT OR REPLACE INTO usuarios (idUsuario,  nombre,isDeleted)  VALUES (?,?,?)',
        usuarios);
    return results;
  }

  /// Deletes Usuario

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Usuario invoked (idUsuario=$idUsuario)');
    var result = BoolResult();
    {
      result = await Cuenta()
          .select()
          .usuariosIdUsuario
          .equals(idUsuario)
          .update({"usuariosIdUsuario": null});
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnUsuario.delete(
          QueryParams(whereString: 'idUsuario=?', whereArguments: [idUsuario]));
    } else {
      return _mnUsuario.updateBatch(
          QueryParams(whereString: 'idUsuario=?', whereArguments: [idUsuario]),
          {'isDeleted': 1});
    }
  }

  /// Recover Usuario>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Usuario invoked (idUsuario=$idUsuario)');
    {
      return _mnUsuario.updateBatch(
          QueryParams(whereString: 'idUsuario=?', whereArguments: [idUsuario]),
          {'isDeleted': 0});
    }
  }

  //private UsuarioFilterBuilder _Select;
  UsuarioFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return UsuarioFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  UsuarioFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return UsuarioFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion usuario

// region UsuarioField
class UsuarioField extends SearchCriteria {
  UsuarioField(this.usuarioFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  UsuarioFilterBuilder usuarioFB;

  UsuarioField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  UsuarioFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    usuarioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, usuarioFB.parameters, param, SqlSyntax.EQuals,
            usuarioFB._addedBlocks)
        : setCriteria(pValue, usuarioFB.parameters, param, SqlSyntax.NotEQuals,
            usuarioFB._addedBlocks);
    _waitingNot = '';
    usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
        usuarioFB._addedBlocks.retVal;
    return usuarioFB;
  }

  UsuarioFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    usuarioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, usuarioFB.parameters, param,
            SqlSyntax.EQualsOrNull, usuarioFB._addedBlocks)
        : setCriteria(pValue, usuarioFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, usuarioFB._addedBlocks);
    _waitingNot = '';
    usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
        usuarioFB._addedBlocks.retVal;
    return usuarioFB;
  }

  UsuarioFilterBuilder isNull() {
    usuarioFB._addedBlocks = setCriteria(
        0,
        usuarioFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        usuarioFB._addedBlocks);
    _waitingNot = '';
    usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
        usuarioFB._addedBlocks.retVal;
    return usuarioFB;
  }

  UsuarioFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      usuarioFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          usuarioFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          usuarioFB._addedBlocks);
      _waitingNot = '';
      usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
          usuarioFB._addedBlocks.retVal;
    }
    return usuarioFB;
  }

  UsuarioFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      usuarioFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          usuarioFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          usuarioFB._addedBlocks);
      _waitingNot = '';
      usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
          usuarioFB._addedBlocks.retVal;
      usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
          usuarioFB._addedBlocks.retVal;
    }
    return usuarioFB;
  }

  UsuarioFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      usuarioFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          usuarioFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          usuarioFB._addedBlocks);
      _waitingNot = '';
      usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
          usuarioFB._addedBlocks.retVal;
    }
    return usuarioFB;
  }

  UsuarioFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      usuarioFB._addedBlocks = setCriteria(
          pFirst,
          usuarioFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          usuarioFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        usuarioFB._addedBlocks = setCriteria(pFirst, usuarioFB.parameters,
            param, SqlSyntax.LessThan, usuarioFB._addedBlocks);
      } else {
        usuarioFB._addedBlocks = setCriteria(pFirst, usuarioFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, usuarioFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        usuarioFB._addedBlocks = setCriteria(pLast, usuarioFB.parameters, param,
            SqlSyntax.GreaterThan, usuarioFB._addedBlocks);
      } else {
        usuarioFB._addedBlocks = setCriteria(pLast, usuarioFB.parameters, param,
            SqlSyntax.LessThanOrEquals, usuarioFB._addedBlocks);
      }
    }
    _waitingNot = '';
    usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
        usuarioFB._addedBlocks.retVal;
    return usuarioFB;
  }

  UsuarioFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    usuarioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, usuarioFB.parameters, param,
            SqlSyntax.GreaterThan, usuarioFB._addedBlocks)
        : setCriteria(pValue, usuarioFB.parameters, param,
            SqlSyntax.LessThanOrEquals, usuarioFB._addedBlocks);
    _waitingNot = '';
    usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
        usuarioFB._addedBlocks.retVal;
    return usuarioFB;
  }

  UsuarioFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    usuarioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, usuarioFB.parameters, param, SqlSyntax.LessThan,
            usuarioFB._addedBlocks)
        : setCriteria(pValue, usuarioFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, usuarioFB._addedBlocks);
    _waitingNot = '';
    usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
        usuarioFB._addedBlocks.retVal;
    return usuarioFB;
  }

  UsuarioFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    usuarioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, usuarioFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, usuarioFB._addedBlocks)
        : setCriteria(pValue, usuarioFB.parameters, param, SqlSyntax.LessThan,
            usuarioFB._addedBlocks);
    _waitingNot = '';
    usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
        usuarioFB._addedBlocks.retVal;
    return usuarioFB;
  }

  UsuarioFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    usuarioFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, usuarioFB.parameters, param,
            SqlSyntax.LessThanOrEquals, usuarioFB._addedBlocks)
        : setCriteria(pValue, usuarioFB.parameters, param,
            SqlSyntax.GreaterThan, usuarioFB._addedBlocks);
    _waitingNot = '';
    usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
        usuarioFB._addedBlocks.retVal;
    return usuarioFB;
  }

  UsuarioFilterBuilder inValues(dynamic pValue) {
    usuarioFB._addedBlocks = setCriteria(
        pValue,
        usuarioFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        usuarioFB._addedBlocks);
    _waitingNot = '';
    usuarioFB._addedBlocks.needEndBlock[usuarioFB._blockIndex] =
        usuarioFB._addedBlocks.retVal;
    return usuarioFB;
  }
}
// endregion UsuarioField

// region UsuarioFilterBuilder
class UsuarioFilterBuilder extends SearchCriteria {
  UsuarioFilterBuilder(Usuario obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Usuario _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  UsuarioFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  UsuarioFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  UsuarioFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  UsuarioFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  UsuarioFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  UsuarioFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  UsuarioFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UsuarioFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UsuarioFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UsuarioFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  UsuarioField setField(UsuarioField field, String colName, DbType dbtype) {
    return UsuarioField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  UsuarioField _idUsuario;
  UsuarioField get idUsuario {
    return _idUsuario = setField(_idUsuario, 'idUsuario', DbType.integer);
  }

  UsuarioField _nombre;
  UsuarioField get nombre {
    return _nombre = setField(_nombre, 'nombre', DbType.text);
  }

  UsuarioField _isDeleted;
  UsuarioField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Usuario._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Usuario> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Usuario._softDeleteActivated && !hardDelete) {
      r = await _obj._mnUsuario.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnUsuario.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Usuario bulk invoked');
    return _obj._mnUsuario.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'idUsuario IN (SELECT idUsuario from usuarios ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnUsuario.updateBatch(qparams, values);
  }

  /// This method always returns UsuarioObj if exist, otherwise returns null
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Usuario>
  Future<Usuario> toSingle(
      {bool preload = false, List<String> preloadFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnUsuario.toList(qparams);
    final data = await objFuture;
    Usuario obj;
    if (data.isNotEmpty) {
      obj = Usuario.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plCuentas')) {
          obj.plCuentas = obj.plCuentas ?? await obj.getCuentas().toList();
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) usuarioCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usuariosFuture = await _obj._mnUsuario.toList(qparams);
    final int count = usuariosFuture[0]['CNT'] as int;
    if (usuarioCount != null) {
      usuarioCount(count);
    }
    return count;
  }

  /// This method always returns List<Usuario>.
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Usuario>
  Future<List<Usuario>> toList(
      {bool preload = false, List<String> preloadFields}) async {
    final data = await toMapList();
    final List<Usuario> usuariosData =
        await Usuario.fromMapList(data, preload: preload);
    return usuariosData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnUsuario.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Usuario>>
  Future<List<DropdownMenuItem<Usuario>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Usuario>> o)
          dropDownMenu]) async {
    _buildParameters();
    final usuariosFuture = _obj._mnUsuario.toList(qparams);

    final data = await usuariosFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Usuario>> items = []..add(DropdownMenuItem(
        value: Usuario(),
        child: Text('Select Usuario'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Usuario.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['idUsuario', displayTextColumn];
    final usuariosFuture = _obj._mnUsuario.toList(qparams);

    final data = await usuariosFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Usuario'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['idUsuario'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idUsuarioData = <int>[];
    qparams.selectColumns = ['idUsuario'];
    final idUsuarioFuture = await _obj._mnUsuario.toList(qparams);

    final int count = idUsuarioFuture.length;
    for (int i = 0; i < count; i++) {
      idUsuarioData.add(idUsuarioFuture[i]['idUsuario'] as int);
    }
    return idUsuarioData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback Function(List<dynamic> o) listObject]) async {
    _buildParameters();

    final objectFuture = _obj._mnUsuario.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Usuario.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnUsuario.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UsuarioFilterBuilder

// region UsuarioFields
class UsuarioFields {
  static TableField _fIdUsuario;
  static TableField get idUsuario {
    return _fIdUsuario = _fIdUsuario ??
        SqlSyntax.setField(_fIdUsuario, 'idusuario', DbType.integer);
  }

  static TableField _fNombre;
  static TableField get nombre {
    return _fNombre =
        _fNombre ?? SqlSyntax.setField(_fNombre, 'nombre', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion UsuarioFields

//region UsuarioManager
class UsuarioManager extends SqfEntityProvider {
  UsuarioManager() : super(DbComplex(), tableName: _tableName, colId: _colId);
  static String _tableName = 'usuarios';
  static String _colId = 'idUsuario';
}

//endregion UsuarioManager
// region Categoria
class Categoria {
  Categoria(
      {this.idCategoria,
      this.descripcion,
      this.color,
      this.icono,
      this.tipo,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Categoria.withFields(
      this.descripcion, this.color, this.icono, this.tipo, this.isDeleted) {
    _setDefaultValues();
  }
  Categoria.withId(this.idCategoria, this.descripcion, this.color, this.icono,
      this.tipo, this.isDeleted) {
    _setDefaultValues();
  }
  Categoria.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    idCategoria = o['idCategoria'] as int;
    if (o['descripcion'] != null) descripcion = o['descripcion'] as String;
    if (o['color'] != null) color = o['color'] as int;
    if (o['icono'] != null) icono = o['icono'] as String;
    if (o['tipo'] != null) tipo = o['tipo'] as String;
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Categoria)
  int idCategoria;
  String descripcion;
  int color;
  String icono;
  String tipo;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Categoria)

// COLLECTIONS & VIRTUALS (Categoria)
  /// to load children of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  List<DetallesCuenta> plDetallesCuentas;

  /// get DetallesCuenta(s) filtered by categoriasIdCategoria=idCategoria
  DetallesCuentaFilterBuilder getDetallesCuentas(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DetallesCuenta()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .categoriasIdCategoria
        .equals(idCategoria)
        .and;
  }
// END COLLECTIONS & VIRTUALS (Categoria)

  static const bool _softDeleteActivated = true;
  CategoriaManager __mnCategoria;

  CategoriaManager get _mnCategoria {
    return __mnCategoria = __mnCategoria ?? CategoriaManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = <String, dynamic>{};
    if (idCategoria != null) {
      map['idCategoria'] = idCategoria;
    }
    if (descripcion != null) {
      map['descripcion'] = descripcion;
    }

    if (color != null) {
      map['color'] = color;
    }

    if (icono != null) {
      map['icono'] = icono;
    }

    if (tipo != null) {
      map['tipo'] = tipo;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = <String, dynamic>{};
    if (idCategoria != null) {
      map['idCategoria'] = idCategoria;
    }
    if (descripcion != null) {
      map['descripcion'] = descripcion;
    }

    if (color != null) {
      map['color'] = color;
    }

    if (icono != null) {
      map['icono'] = icono;
    }

    if (tipo != null) {
      map['tipo'] = tipo;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Categoria)
    if (!forQuery) {
      map['DetallesCuentas'] = await getDetallesCuentas().toMapList();
    }
// END COLLECTIONS (Categoria)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [idCategoria, descripcion, color, icono, tipo, isDeleted];
  }

  static Future<List<Categoria>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Categoria.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Categoria>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Categoria>[];
    try {
      objList = list
          .map((categoria) =>
              Categoria.fromMap(categoria as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Categoria.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<Categoria>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await Categoria.fromMapList(data);
    } 
    */

  static Future<List<Categoria>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields}) async {
    final List<Categoria> objList = <Categoria>[];
    for (final map in data) {
      final obj = Categoria.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null ||
            preloadFields.contains('plDetallesCuentas')) {
          obj.plDetallesCuentas =
              obj.plDetallesCuentas ?? await obj.getDetallesCuentas().toList();
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Categoria by ID if exist, otherwise returns null
  /// <param name='idCategoria'>Primary Key Value</param>
  /// <returns>returns Categoria if exist, otherwise returns null
  Future<Categoria> getById(int idcategoria) async {
    if (idcategoria == null) {
      return null;
    }
    Categoria obj;
    final data = await _mnCategoria.getById(idcategoria);
    if (data.length != 0) {
      obj = Categoria.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Categoria) object. If the idCategoria field is null, saves as a new record and returns new idCategoria, if idCategoria is not null then updates record

  /// <returns>Returns idCategoria
  Future<int> save() async {
    if (idCategoria == null || idCategoria == 0) {
      idCategoria = await _mnCategoria.insert(this);
    } else {
      idCategoria = await _upsert();
    }

    return idCategoria;
  }

  /// saveAs Categoria. Returns a new Primary Key value of Categoria

  /// <returns>Returns a new Primary Key value of Categoria
  Future<int> saveAs() async {
    idCategoria = null;

    return save();
  }

  /// saveAll method saves the sent List<Categoria> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Categoria> categorias) async {
    final results = _mnCategoria.saveAll(
        'INSERT OR REPLACE INTO categorias (idCategoria,  descripcion, color, icono, tipo,isDeleted)  VALUES (?,?,?,?,?,?)',
        categorias);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns idCategoria
  Future<int> _upsert() async {
    try {
      if (await _mnCategoria.rawInsert(
              'INSERT OR REPLACE INTO categorias (idCategoria,  descripcion, color, icono, tipo,isDeleted)  VALUES (?,?,?,?,?,?)',
              [idCategoria, descripcion, color, icono, tipo, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'Categoria idCategoria=$idCategoria updated successfuly');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Categoria idCategoria=$idCategoria did not update');
      }
      return idCategoria;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Categoria Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Categoria>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Categoria> categorias) async {
    final results = await _mnCategoria.rawInsertAll(
        'INSERT OR REPLACE INTO categorias (idCategoria,  descripcion, color, icono, tipo,isDeleted)  VALUES (?,?,?,?,?,?)',
        categorias);
    return results;
  }

  /// Deletes Categoria

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Categoria invoked (idCategoria=$idCategoria)');
    var result = BoolResult();
    {
      result = await DetallesCuenta()
          .select()
          .categoriasIdCategoria
          .equals(idCategoria)
          .update({"categoriasIdCategoria": null});
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnCategoria.delete(QueryParams(
          whereString: 'idCategoria=?', whereArguments: [idCategoria]));
    } else {
      return _mnCategoria.updateBatch(
          QueryParams(
              whereString: 'idCategoria=?', whereArguments: [idCategoria]),
          {'isDeleted': 1});
    }
  }

  /// Recover Categoria>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Categoria invoked (idCategoria=$idCategoria)');
    {
      return _mnCategoria.updateBatch(
          QueryParams(
              whereString: 'idCategoria=?', whereArguments: [idCategoria]),
          {'isDeleted': 0});
    }
  }

  //private CategoriaFilterBuilder _Select;
  CategoriaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CategoriaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CategoriaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CategoriaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    color = color ?? 0;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion categoria

// region CategoriaField
class CategoriaField extends SearchCriteria {
  CategoriaField(this.categoriaFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  CategoriaFilterBuilder categoriaFB;

  CategoriaField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CategoriaFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    categoriaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriaFB.parameters, param, SqlSyntax.EQuals,
            categoriaFB._addedBlocks)
        : setCriteria(pValue, categoriaFB.parameters, param,
            SqlSyntax.NotEQuals, categoriaFB._addedBlocks);
    _waitingNot = '';
    categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
        categoriaFB._addedBlocks.retVal;
    return categoriaFB;
  }

  CategoriaFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    categoriaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriaFB.parameters, param,
            SqlSyntax.EQualsOrNull, categoriaFB._addedBlocks)
        : setCriteria(pValue, categoriaFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, categoriaFB._addedBlocks);
    _waitingNot = '';
    categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
        categoriaFB._addedBlocks.retVal;
    return categoriaFB;
  }

  CategoriaFilterBuilder isNull() {
    categoriaFB._addedBlocks = setCriteria(
        0,
        categoriaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        categoriaFB._addedBlocks);
    _waitingNot = '';
    categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
        categoriaFB._addedBlocks.retVal;
    return categoriaFB;
  }

  CategoriaFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      categoriaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          categoriaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoriaFB._addedBlocks);
      _waitingNot = '';
      categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
          categoriaFB._addedBlocks.retVal;
    }
    return categoriaFB;
  }

  CategoriaFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      categoriaFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          categoriaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoriaFB._addedBlocks);
      _waitingNot = '';
      categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
          categoriaFB._addedBlocks.retVal;
      categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
          categoriaFB._addedBlocks.retVal;
    }
    return categoriaFB;
  }

  CategoriaFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      categoriaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          categoriaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoriaFB._addedBlocks);
      _waitingNot = '';
      categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
          categoriaFB._addedBlocks.retVal;
    }
    return categoriaFB;
  }

  CategoriaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      categoriaFB._addedBlocks = setCriteria(
          pFirst,
          categoriaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          categoriaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        categoriaFB._addedBlocks = setCriteria(pFirst, categoriaFB.parameters,
            param, SqlSyntax.LessThan, categoriaFB._addedBlocks);
      } else {
        categoriaFB._addedBlocks = setCriteria(pFirst, categoriaFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, categoriaFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        categoriaFB._addedBlocks = setCriteria(pLast, categoriaFB.parameters,
            param, SqlSyntax.GreaterThan, categoriaFB._addedBlocks);
      } else {
        categoriaFB._addedBlocks = setCriteria(pLast, categoriaFB.parameters,
            param, SqlSyntax.LessThanOrEquals, categoriaFB._addedBlocks);
      }
    }
    _waitingNot = '';
    categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
        categoriaFB._addedBlocks.retVal;
    return categoriaFB;
  }

  CategoriaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    categoriaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriaFB.parameters, param,
            SqlSyntax.GreaterThan, categoriaFB._addedBlocks)
        : setCriteria(pValue, categoriaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoriaFB._addedBlocks);
    _waitingNot = '';
    categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
        categoriaFB._addedBlocks.retVal;
    return categoriaFB;
  }

  CategoriaFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    categoriaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriaFB.parameters, param, SqlSyntax.LessThan,
            categoriaFB._addedBlocks)
        : setCriteria(pValue, categoriaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoriaFB._addedBlocks);
    _waitingNot = '';
    categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
        categoriaFB._addedBlocks.retVal;
    return categoriaFB;
  }

  CategoriaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    categoriaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, categoriaFB._addedBlocks)
        : setCriteria(pValue, categoriaFB.parameters, param, SqlSyntax.LessThan,
            categoriaFB._addedBlocks);
    _waitingNot = '';
    categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
        categoriaFB._addedBlocks.retVal;
    return categoriaFB;
  }

  CategoriaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    categoriaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, categoriaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, categoriaFB._addedBlocks)
        : setCriteria(pValue, categoriaFB.parameters, param,
            SqlSyntax.GreaterThan, categoriaFB._addedBlocks);
    _waitingNot = '';
    categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
        categoriaFB._addedBlocks.retVal;
    return categoriaFB;
  }

  CategoriaFilterBuilder inValues(dynamic pValue) {
    categoriaFB._addedBlocks = setCriteria(
        pValue,
        categoriaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        categoriaFB._addedBlocks);
    _waitingNot = '';
    categoriaFB._addedBlocks.needEndBlock[categoriaFB._blockIndex] =
        categoriaFB._addedBlocks.retVal;
    return categoriaFB;
  }
}
// endregion CategoriaField

// region CategoriaFilterBuilder
class CategoriaFilterBuilder extends SearchCriteria {
  CategoriaFilterBuilder(Categoria obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Categoria _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  CategoriaFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CategoriaFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CategoriaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CategoriaFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CategoriaFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  CategoriaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CategoriaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CategoriaFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CategoriaFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CategoriaFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  CategoriaField setField(CategoriaField field, String colName, DbType dbtype) {
    return CategoriaField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  CategoriaField _idCategoria;
  CategoriaField get idCategoria {
    return _idCategoria = setField(_idCategoria, 'idCategoria', DbType.integer);
  }

  CategoriaField _descripcion;
  CategoriaField get descripcion {
    return _descripcion = setField(_descripcion, 'descripcion', DbType.text);
  }

  CategoriaField _color;
  CategoriaField get color {
    return _color = setField(_color, 'color', DbType.integer);
  }

  CategoriaField _icono;
  CategoriaField get icono {
    return _icono = setField(_icono, 'icono', DbType.text);
  }

  CategoriaField _tipo;
  CategoriaField get tipo {
    return _tipo = setField(_tipo, 'tipo', DbType.text);
  }

  CategoriaField _isDeleted;
  CategoriaField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Categoria._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Categoria> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Categoria._softDeleteActivated && !hardDelete) {
      r = await _obj._mnCategoria.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnCategoria.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Categoria bulk invoked');
    return _obj._mnCategoria.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'idCategoria IN (SELECT idCategoria from categorias ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnCategoria.updateBatch(qparams, values);
  }

  /// This method always returns CategoriaObj if exist, otherwise returns null
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Categoria>
  Future<Categoria> toSingle(
      {bool preload = false, List<String> preloadFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnCategoria.toList(qparams);
    final data = await objFuture;
    Categoria obj;
    if (data.isNotEmpty) {
      obj = Categoria.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null ||
            preloadFields.contains('plDetallesCuentas')) {
          obj.plDetallesCuentas =
              obj.plDetallesCuentas ?? await obj.getDetallesCuentas().toList();
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) categoriaCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final categoriasFuture = await _obj._mnCategoria.toList(qparams);
    final int count = categoriasFuture[0]['CNT'] as int;
    if (categoriaCount != null) {
      categoriaCount(count);
    }
    return count;
  }

  /// This method always returns List<Categoria>.
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Categoria>
  Future<List<Categoria>> toList(
      {bool preload = false, List<String> preloadFields}) async {
    final data = await toMapList();
    final List<Categoria> categoriasData =
        await Categoria.fromMapList(data, preload: preload);
    return categoriasData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnCategoria.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Categoria>>
  Future<List<DropdownMenuItem<Categoria>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Categoria>> o)
          dropDownMenu]) async {
    _buildParameters();
    final categoriasFuture = _obj._mnCategoria.toList(qparams);

    final data = await categoriasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Categoria>> items = []..add(DropdownMenuItem(
        value: Categoria(),
        child: Text('Select Categoria'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Categoria.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['idCategoria', displayTextColumn];
    final categoriasFuture = _obj._mnCategoria.toList(qparams);

    final data = await categoriasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Categoria'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['idCategoria'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idCategoriaData = <int>[];
    qparams.selectColumns = ['idCategoria'];
    final idCategoriaFuture = await _obj._mnCategoria.toList(qparams);

    final int count = idCategoriaFuture.length;
    for (int i = 0; i < count; i++) {
      idCategoriaData.add(idCategoriaFuture[i]['idCategoria'] as int);
    }
    return idCategoriaData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback Function(List<dynamic> o) listObject]) async {
    _buildParameters();

    final objectFuture = _obj._mnCategoria.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Categoria.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnCategoria.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CategoriaFilterBuilder

// region CategoriaFields
class CategoriaFields {
  static TableField _fIdCategoria;
  static TableField get idCategoria {
    return _fIdCategoria = _fIdCategoria ??
        SqlSyntax.setField(_fIdCategoria, 'idcategoria', DbType.integer);
  }

  static TableField _fDescripcion;
  static TableField get descripcion {
    return _fDescripcion = _fDescripcion ??
        SqlSyntax.setField(_fDescripcion, 'descripcion', DbType.text);
  }

  static TableField _fColor;
  static TableField get color {
    return _fColor =
        _fColor ?? SqlSyntax.setField(_fColor, 'color', DbType.integer);
  }

  static TableField _fIcono;
  static TableField get icono {
    return _fIcono =
        _fIcono ?? SqlSyntax.setField(_fIcono, 'icono', DbType.text);
  }

  static TableField _fTipo;
  static TableField get tipo {
    return _fTipo = _fTipo ?? SqlSyntax.setField(_fTipo, 'tipo', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CategoriaFields

//region CategoriaManager
class CategoriaManager extends SqfEntityProvider {
  CategoriaManager() : super(DbComplex(), tableName: _tableName, colId: _colId);
  static String _tableName = 'categorias';
  static String _colId = 'idCategoria';
}

//endregion CategoriaManager
// region Cuenta
class Cuenta {
  Cuenta(
      {this.idCuenta,
      this.descripcion,
      this.saldo,
      this.totalIngreso,
      this.totalEgreso,
      this.usuariosIdUsuario,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Cuenta.withFields(this.descripcion, this.saldo, this.totalIngreso,
      this.totalEgreso, this.usuariosIdUsuario, this.isDeleted) {
    _setDefaultValues();
  }
  Cuenta.withId(this.idCuenta, this.descripcion, this.saldo, this.totalIngreso,
      this.totalEgreso, this.usuariosIdUsuario, this.isDeleted) {
    _setDefaultValues();
  }
  Cuenta.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    idCuenta = o['idCuenta'] as int;
    if (o['descripcion'] != null) descripcion = o['descripcion'] as String;
    if (o['saldo'] != null) saldo = double.tryParse(o['saldo'].toString());
    if (o['totalIngreso'] != null)
      totalIngreso = double.tryParse(o['totalIngreso'].toString());
    if (o['totalEgreso'] != null)
      totalEgreso = double.tryParse(o['totalEgreso'].toString());
    usuariosIdUsuario = o['usuariosIdUsuario'] as int;

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plUsuario = o['usuario'] != null
        ? Usuario.fromMap(o['usuario'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Cuenta)
  int idCuenta;
  String descripcion;
  double saldo;
  double totalIngreso;
  double totalEgreso;
  int usuariosIdUsuario;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Cuenta)

// RELATIONSHIPS (Cuenta)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  Usuario plUsuario;

  /// get Usuario By UsuariosIdUsuario
  Future<Usuario> getUsuario() async {
    final _obj = await Usuario().getById(usuariosIdUsuario);
    return _obj;
  }
  // END RELATIONSHIPS (Cuenta)

// COLLECTIONS & VIRTUALS (Cuenta)
  /// to load children of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  List<DetallesCuenta> plDetallesCuentas;

  /// get DetallesCuenta(s) filtered by cuentasIdCuenta=idCuenta
  DetallesCuentaFilterBuilder getDetallesCuentas(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DetallesCuenta()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .cuentasIdCuenta
        .equals(idCuenta)
        .and;
  }
// END COLLECTIONS & VIRTUALS (Cuenta)

  static const bool _softDeleteActivated = true;
  CuentaManager __mnCuenta;

  CuentaManager get _mnCuenta {
    return __mnCuenta = __mnCuenta ?? CuentaManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = <String, dynamic>{};
    if (idCuenta != null) {
      map['idCuenta'] = idCuenta;
    }
    if (descripcion != null) {
      map['descripcion'] = descripcion;
    }

    if (saldo != null) {
      map['saldo'] = saldo;
    }

    if (totalIngreso != null) {
      map['totalIngreso'] = totalIngreso;
    }

    if (totalEgreso != null) {
      map['totalEgreso'] = totalEgreso;
    }

    if (usuariosIdUsuario != null) {
      map['usuariosIdUsuario'] = usuariosIdUsuario;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = <String, dynamic>{};
    if (idCuenta != null) {
      map['idCuenta'] = idCuenta;
    }
    if (descripcion != null) {
      map['descripcion'] = descripcion;
    }

    if (saldo != null) {
      map['saldo'] = saldo;
    }

    if (totalIngreso != null) {
      map['totalIngreso'] = totalIngreso;
    }

    if (totalEgreso != null) {
      map['totalEgreso'] = totalEgreso;
    }

    if (usuariosIdUsuario != null) {
      map['usuariosIdUsuario'] = usuariosIdUsuario;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Cuenta)
    if (!forQuery) {
      map['DetallesCuentas'] = await getDetallesCuentas().toMapList();
    }
// END COLLECTIONS (Cuenta)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      idCuenta,
      descripcion,
      saldo,
      totalIngreso,
      totalEgreso,
      usuariosIdUsuario,
      isDeleted
    ];
  }

  static Future<List<Cuenta>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Cuenta.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Cuenta>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Cuenta>[];
    try {
      objList = list
          .map((cuenta) => Cuenta.fromMap(cuenta as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Cuenta.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<Cuenta>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await Cuenta.fromMapList(data);
    } 
    */

  static Future<List<Cuenta>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields}) async {
    final List<Cuenta> objList = <Cuenta>[];
    for (final map in data) {
      final obj = Cuenta.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null ||
            preloadFields.contains('plDetallesCuentas')) {
          obj.plDetallesCuentas =
              obj.plDetallesCuentas ?? await obj.getDetallesCuentas().toList();
        }
      } // END RELATIONSHIPS PRELOAD

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plUsuario')) {
          obj.plUsuario = obj.plUsuario ?? await obj.getUsuario();
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Cuenta by ID if exist, otherwise returns null
  /// <param name='idCuenta'>Primary Key Value</param>
  /// <returns>returns Cuenta if exist, otherwise returns null
  Future<Cuenta> getById(int idcuenta) async {
    if (idcuenta == null) {
      return null;
    }
    Cuenta obj;
    final data = await _mnCuenta.getById(idcuenta);
    if (data.length != 0) {
      obj = Cuenta.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Cuenta) object. If the idCuenta field is null, saves as a new record and returns new idCuenta, if idCuenta is not null then updates record

  /// <returns>Returns idCuenta
  Future<int> save() async {
    if (idCuenta == null || idCuenta == 0) {
      idCuenta = await _mnCuenta.insert(this);
    } else {
      idCuenta = await _upsert();
    }

    return idCuenta;
  }

  /// saveAs Cuenta. Returns a new Primary Key value of Cuenta

  /// <returns>Returns a new Primary Key value of Cuenta
  Future<int> saveAs() async {
    idCuenta = null;

    return save();
  }

  /// saveAll method saves the sent List<Cuenta> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Cuenta> cuentas) async {
    final results = _mnCuenta.saveAll(
        'INSERT OR REPLACE INTO cuentas (idCuenta,  descripcion, saldo, totalIngreso, totalEgreso, usuariosIdUsuario,isDeleted)  VALUES (?,?,?,?,?,?,?)',
        cuentas);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns idCuenta
  Future<int> _upsert() async {
    try {
      if (await _mnCuenta.rawInsert(
              'INSERT OR REPLACE INTO cuentas (idCuenta,  descripcion, saldo, totalIngreso, totalEgreso, usuariosIdUsuario,isDeleted)  VALUES (?,?,?,?,?,?,?)',
              [
                idCuenta,
                descripcion,
                saldo,
                totalIngreso,
                totalEgreso,
                usuariosIdUsuario,
                isDeleted
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Cuenta idCuenta=$idCuenta updated successfuly');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Cuenta idCuenta=$idCuenta did not update');
      }
      return idCuenta;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Cuenta Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Cuenta>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Cuenta> cuentas) async {
    final results = await _mnCuenta.rawInsertAll(
        'INSERT OR REPLACE INTO cuentas (idCuenta,  descripcion, saldo, totalIngreso, totalEgreso, usuariosIdUsuario,isDeleted)  VALUES (?,?,?,?,?,?,?)',
        cuentas);
    return results;
  }

  /// Deletes Cuenta

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Cuenta invoked (idCuenta=$idCuenta)');
    var result = BoolResult();
    {
      result = await DetallesCuenta()
          .select()
          .cuentasIdCuenta
          .equals(idCuenta)
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnCuenta.delete(
          QueryParams(whereString: 'idCuenta=?', whereArguments: [idCuenta]));
    } else {
      return _mnCuenta.updateBatch(
          QueryParams(whereString: 'idCuenta=?', whereArguments: [idCuenta]),
          {'isDeleted': 1});
    }
  }

  /// Recover Cuenta>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Cuenta invoked (idCuenta=$idCuenta)');
    var result = BoolResult();
    if (recoverChilds) {
      result = await DetallesCuenta()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .cuentasIdCuenta
          .equals(idCuenta)
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnCuenta.updateBatch(
          QueryParams(whereString: 'idCuenta=?', whereArguments: [idCuenta]),
          {'isDeleted': 0});
    }
  }

  //private CuentaFilterBuilder _Select;
  CuentaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CuentaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  CuentaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return CuentaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    saldo = saldo ?? 0;
    totalIngreso = totalIngreso ?? 0;
    totalEgreso = totalEgreso ?? 0;
    usuariosIdUsuario = usuariosIdUsuario ?? 0;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion cuenta

// region CuentaField
class CuentaField extends SearchCriteria {
  CuentaField(this.cuentaFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  CuentaFilterBuilder cuentaFB;

  CuentaField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  CuentaFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    cuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, cuentaFB.parameters, param, SqlSyntax.EQuals,
            cuentaFB._addedBlocks)
        : setCriteria(pValue, cuentaFB.parameters, param, SqlSyntax.NotEQuals,
            cuentaFB._addedBlocks);
    _waitingNot = '';
    cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
        cuentaFB._addedBlocks.retVal;
    return cuentaFB;
  }

  CuentaFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    cuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, cuentaFB.parameters, param,
            SqlSyntax.EQualsOrNull, cuentaFB._addedBlocks)
        : setCriteria(pValue, cuentaFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, cuentaFB._addedBlocks);
    _waitingNot = '';
    cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
        cuentaFB._addedBlocks.retVal;
    return cuentaFB;
  }

  CuentaFilterBuilder isNull() {
    cuentaFB._addedBlocks = setCriteria(
        0,
        cuentaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        cuentaFB._addedBlocks);
    _waitingNot = '';
    cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
        cuentaFB._addedBlocks.retVal;
    return cuentaFB;
  }

  CuentaFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      cuentaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          cuentaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          cuentaFB._addedBlocks);
      _waitingNot = '';
      cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
          cuentaFB._addedBlocks.retVal;
    }
    return cuentaFB;
  }

  CuentaFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      cuentaFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          cuentaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          cuentaFB._addedBlocks);
      _waitingNot = '';
      cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
          cuentaFB._addedBlocks.retVal;
      cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
          cuentaFB._addedBlocks.retVal;
    }
    return cuentaFB;
  }

  CuentaFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      cuentaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          cuentaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          cuentaFB._addedBlocks);
      _waitingNot = '';
      cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
          cuentaFB._addedBlocks.retVal;
    }
    return cuentaFB;
  }

  CuentaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      cuentaFB._addedBlocks = setCriteria(
          pFirst,
          cuentaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          cuentaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        cuentaFB._addedBlocks = setCriteria(pFirst, cuentaFB.parameters, param,
            SqlSyntax.LessThan, cuentaFB._addedBlocks);
      } else {
        cuentaFB._addedBlocks = setCriteria(pFirst, cuentaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, cuentaFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        cuentaFB._addedBlocks = setCriteria(pLast, cuentaFB.parameters, param,
            SqlSyntax.GreaterThan, cuentaFB._addedBlocks);
      } else {
        cuentaFB._addedBlocks = setCriteria(pLast, cuentaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, cuentaFB._addedBlocks);
      }
    }
    _waitingNot = '';
    cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
        cuentaFB._addedBlocks.retVal;
    return cuentaFB;
  }

  CuentaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    cuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, cuentaFB.parameters, param, SqlSyntax.GreaterThan,
            cuentaFB._addedBlocks)
        : setCriteria(pValue, cuentaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, cuentaFB._addedBlocks);
    _waitingNot = '';
    cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
        cuentaFB._addedBlocks.retVal;
    return cuentaFB;
  }

  CuentaFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    cuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, cuentaFB.parameters, param, SqlSyntax.LessThan,
            cuentaFB._addedBlocks)
        : setCriteria(pValue, cuentaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, cuentaFB._addedBlocks);
    _waitingNot = '';
    cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
        cuentaFB._addedBlocks.retVal;
    return cuentaFB;
  }

  CuentaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    cuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, cuentaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, cuentaFB._addedBlocks)
        : setCriteria(pValue, cuentaFB.parameters, param, SqlSyntax.LessThan,
            cuentaFB._addedBlocks);
    _waitingNot = '';
    cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
        cuentaFB._addedBlocks.retVal;
    return cuentaFB;
  }

  CuentaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    cuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, cuentaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, cuentaFB._addedBlocks)
        : setCriteria(pValue, cuentaFB.parameters, param, SqlSyntax.GreaterThan,
            cuentaFB._addedBlocks);
    _waitingNot = '';
    cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
        cuentaFB._addedBlocks.retVal;
    return cuentaFB;
  }

  CuentaFilterBuilder inValues(dynamic pValue) {
    cuentaFB._addedBlocks = setCriteria(
        pValue,
        cuentaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        cuentaFB._addedBlocks);
    _waitingNot = '';
    cuentaFB._addedBlocks.needEndBlock[cuentaFB._blockIndex] =
        cuentaFB._addedBlocks.retVal;
    return cuentaFB;
  }
}
// endregion CuentaField

// region CuentaFilterBuilder
class CuentaFilterBuilder extends SearchCriteria {
  CuentaFilterBuilder(Cuenta obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Cuenta _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  CuentaFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  CuentaFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  CuentaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  CuentaFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  CuentaFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  CuentaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  CuentaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  CuentaFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CuentaFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  CuentaFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  CuentaField setField(CuentaField field, String colName, DbType dbtype) {
    return CuentaField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  CuentaField _idCuenta;
  CuentaField get idCuenta {
    return _idCuenta = setField(_idCuenta, 'idCuenta', DbType.integer);
  }

  CuentaField _descripcion;
  CuentaField get descripcion {
    return _descripcion = setField(_descripcion, 'descripcion', DbType.text);
  }

  CuentaField _saldo;
  CuentaField get saldo {
    return _saldo = setField(_saldo, 'saldo', DbType.real);
  }

  CuentaField _totalIngreso;
  CuentaField get totalIngreso {
    return _totalIngreso = setField(_totalIngreso, 'totalIngreso', DbType.real);
  }

  CuentaField _totalEgreso;
  CuentaField get totalEgreso {
    return _totalEgreso = setField(_totalEgreso, 'totalEgreso', DbType.real);
  }

  CuentaField _usuariosIdUsuario;
  CuentaField get usuariosIdUsuario {
    return _usuariosIdUsuario =
        setField(_usuariosIdUsuario, 'usuariosIdUsuario', DbType.integer);
  }

  CuentaField _isDeleted;
  CuentaField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Cuenta._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Cuenta> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    final detallesCuentaBycuentasIdCuentaidList = await toListPrimaryKey(false);
    await DetallesCuenta()
        .select()
        .cuentasIdCuenta
        .inValues(detallesCuentaBycuentasIdCuentaidList)
        .delete(hardDelete);

    if (Cuenta._softDeleteActivated && !hardDelete) {
      r = await _obj._mnCuenta.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnCuenta.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Cuenta bulk invoked');
    final detallesCuentaBycuentasIdCuentaidList = await toListPrimaryKey(false);
    await DetallesCuenta()
        .select(getIsDeleted: true)
        .isDeleted
        .equals(true)
        .and
        .cuentasIdCuenta
        .inValues(detallesCuentaBycuentasIdCuentaidList)
        .update({'isDeleted': 0});
    return _obj._mnCuenta.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'idCuenta IN (SELECT idCuenta from cuentas ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnCuenta.updateBatch(qparams, values);
  }

  /// This method always returns CuentaObj if exist, otherwise returns null
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Cuenta>
  Future<Cuenta> toSingle(
      {bool preload = false, List<String> preloadFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnCuenta.toList(qparams);
    final data = await objFuture;
    Cuenta obj;
    if (data.isNotEmpty) {
      obj = Cuenta.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null ||
            preloadFields.contains('plDetallesCuentas')) {
          obj.plDetallesCuentas =
              obj.plDetallesCuentas ?? await obj.getDetallesCuentas().toList();
        }
      } // END RELATIONSHIPS PRELOAD

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plUsuario')) {
          obj.plUsuario = obj.plUsuario ?? await obj.getUsuario();
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) cuentaCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final cuentasFuture = await _obj._mnCuenta.toList(qparams);
    final int count = cuentasFuture[0]['CNT'] as int;
    if (cuentaCount != null) {
      cuentaCount(count);
    }
    return count;
  }

  /// This method always returns List<Cuenta>.
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Cuenta>
  Future<List<Cuenta>> toList(
      {bool preload = false, List<String> preloadFields}) async {
    final data = await toMapList();
    final List<Cuenta> cuentasData =
        await Cuenta.fromMapList(data, preload: preload);
    return cuentasData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnCuenta.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Cuenta>>
  Future<List<DropdownMenuItem<Cuenta>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Cuenta>> o)
          dropDownMenu]) async {
    _buildParameters();
    final cuentasFuture = _obj._mnCuenta.toList(qparams);

    final data = await cuentasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Cuenta>> items = []..add(DropdownMenuItem(
        value: Cuenta(),
        child: Text('Select Cuenta'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Cuenta.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['idCuenta', displayTextColumn];
    final cuentasFuture = _obj._mnCuenta.toList(qparams);

    final data = await cuentasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Cuenta'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['idCuenta'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idCuentaData = <int>[];
    qparams.selectColumns = ['idCuenta'];
    final idCuentaFuture = await _obj._mnCuenta.toList(qparams);

    final int count = idCuentaFuture.length;
    for (int i = 0; i < count; i++) {
      idCuentaData.add(idCuentaFuture[i]['idCuenta'] as int);
    }
    return idCuentaData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback Function(List<dynamic> o) listObject]) async {
    _buildParameters();

    final objectFuture = _obj._mnCuenta.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Cuenta.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnCuenta.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CuentaFilterBuilder

// region CuentaFields
class CuentaFields {
  static TableField _fIdCuenta;
  static TableField get idCuenta {
    return _fIdCuenta = _fIdCuenta ??
        SqlSyntax.setField(_fIdCuenta, 'idcuenta', DbType.integer);
  }

  static TableField _fDescripcion;
  static TableField get descripcion {
    return _fDescripcion = _fDescripcion ??
        SqlSyntax.setField(_fDescripcion, 'descripcion', DbType.text);
  }

  static TableField _fSaldo;
  static TableField get saldo {
    return _fSaldo =
        _fSaldo ?? SqlSyntax.setField(_fSaldo, 'saldo', DbType.real);
  }

  static TableField _fTotalIngreso;
  static TableField get totalIngreso {
    return _fTotalIngreso = _fTotalIngreso ??
        SqlSyntax.setField(_fTotalIngreso, 'totalIngreso', DbType.real);
  }

  static TableField _fTotalEgreso;
  static TableField get totalEgreso {
    return _fTotalEgreso = _fTotalEgreso ??
        SqlSyntax.setField(_fTotalEgreso, 'totalEgreso', DbType.real);
  }

  static TableField _fUsuariosIdUsuario;
  static TableField get usuariosIdUsuario {
    return _fUsuariosIdUsuario = _fUsuariosIdUsuario ??
        SqlSyntax.setField(
            _fUsuariosIdUsuario, 'usuariosIdUsuario', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion CuentaFields

//region CuentaManager
class CuentaManager extends SqfEntityProvider {
  CuentaManager() : super(DbComplex(), tableName: _tableName, colId: _colId);
  static String _tableName = 'cuentas';
  static String _colId = 'idCuenta';
}

//endregion CuentaManager
// region DetallesCuenta
class DetallesCuenta {
  DetallesCuenta(
      {this.idDetalleCuenta,
      this.descripcion,
      this.fecha,
      this.monto,
      this.saldoEnFecha,
      this.tipoTransaccion,
      this.cuentasIdCuenta,
      this.categoriasIdCategoria,
      this.isDeleted}) {
    _setDefaultValues();
  }
  DetallesCuenta.withFields(
      this.descripcion,
      this.fecha,
      this.monto,
      this.saldoEnFecha,
      this.tipoTransaccion,
      this.cuentasIdCuenta,
      this.categoriasIdCategoria,
      this.isDeleted) {
    _setDefaultValues();
  }
  DetallesCuenta.withId(
      this.idDetalleCuenta,
      this.descripcion,
      this.fecha,
      this.monto,
      this.saldoEnFecha,
      this.tipoTransaccion,
      this.cuentasIdCuenta,
      this.categoriasIdCategoria,
      this.isDeleted) {
    _setDefaultValues();
  }
  DetallesCuenta.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    idDetalleCuenta = o['idDetalleCuenta'] as int;
    if (o['descripcion'] != null) descripcion = o['descripcion'] as String;
    if (o['fecha'] != null) fecha = o['fecha'] as String;
    if (o['monto'] != null) monto = double.tryParse(o['monto'].toString());
    if (o['saldoEnFecha'] != null)
      saldoEnFecha = double.tryParse(o['saldoEnFecha'].toString());
    if (o['tipoTransaccion'] != null)
      tipoTransaccion = o['tipoTransaccion'] as String;
    cuentasIdCuenta = o['cuentasIdCuenta'] as int;

    categoriasIdCategoria = o['categoriasIdCategoria'] as int;

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plCuenta = o['cuenta'] != null
        ? Cuenta.fromMap(o['cuenta'] as Map<String, dynamic>)
        : null;
    plCategoria = o['categoria'] != null
        ? Categoria.fromMap(o['categoria'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (DetallesCuenta)
  int idDetalleCuenta;
  String descripcion;
  String fecha;
  double monto;
  double saldoEnFecha;
  String tipoTransaccion;
  int cuentasIdCuenta;
  int categoriasIdCategoria;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (DetallesCuenta)

// RELATIONSHIPS (DetallesCuenta)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  Cuenta plCuenta;

  /// get Cuenta By CuentasIdCuenta
  Future<Cuenta> getCuenta() async {
    final _obj = await Cuenta().getById(cuentasIdCuenta);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  Categoria plCategoria;

  /// get Categoria By CategoriasIdCategoria
  Future<Categoria> getCategoria() async {
    final _obj = await Categoria().getById(categoriasIdCategoria);
    return _obj;
  }
  // END RELATIONSHIPS (DetallesCuenta)

  static const bool _softDeleteActivated = true;
  DetallesCuentaManager __mnDetallesCuenta;

  DetallesCuentaManager get _mnDetallesCuenta {
    return __mnDetallesCuenta = __mnDetallesCuenta ?? DetallesCuentaManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = <String, dynamic>{};
    if (idDetalleCuenta != null) {
      map['idDetalleCuenta'] = idDetalleCuenta;
    }
    if (descripcion != null) {
      map['descripcion'] = descripcion;
    }

    if (fecha != null) {
      map['fecha'] = fecha;
    }

    if (monto != null) {
      map['monto'] = monto;
    }

    if (saldoEnFecha != null) {
      map['saldoEnFecha'] = saldoEnFecha;
    }

    if (tipoTransaccion != null) {
      map['tipoTransaccion'] = tipoTransaccion;
    }

    if (cuentasIdCuenta != null) {
      map['cuentasIdCuenta'] = cuentasIdCuenta;
    }

    if (categoriasIdCategoria != null) {
      map['categoriasIdCategoria'] = categoriasIdCategoria;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = <String, dynamic>{};
    if (idDetalleCuenta != null) {
      map['idDetalleCuenta'] = idDetalleCuenta;
    }
    if (descripcion != null) {
      map['descripcion'] = descripcion;
    }

    if (fecha != null) {
      map['fecha'] = fecha;
    }

    if (monto != null) {
      map['monto'] = monto;
    }

    if (saldoEnFecha != null) {
      map['saldoEnFecha'] = saldoEnFecha;
    }

    if (tipoTransaccion != null) {
      map['tipoTransaccion'] = tipoTransaccion;
    }

    if (cuentasIdCuenta != null) {
      map['cuentasIdCuenta'] = cuentasIdCuenta;
    }

    if (categoriasIdCategoria != null) {
      map['categoriasIdCategoria'] = categoriasIdCategoria;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      idDetalleCuenta,
      descripcion,
      fecha,
      monto,
      saldoEnFecha,
      tipoTransaccion,
      cuentasIdCuenta,
      categoriasIdCategoria,
      isDeleted
    ];
  }

  static Future<List<DetallesCuenta>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR DetallesCuenta.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<DetallesCuenta>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <DetallesCuenta>[];
    try {
      objList = list
          .map((detallescuenta) =>
              DetallesCuenta.fromMap(detallescuenta as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR DetallesCuenta.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<DetallesCuenta>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await DetallesCuenta.fromMapList(data);
    } 
    */

  static Future<List<DetallesCuenta>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields}) async {
    final List<DetallesCuenta> objList = <DetallesCuenta>[];
    for (final map in data) {
      final obj = DetallesCuenta.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plCuenta')) {
          obj.plCuenta = obj.plCuenta ?? await obj.getCuenta();
        }
        if (preloadFields == null || preloadFields.contains('plCategoria')) {
          obj.plCategoria = obj.plCategoria ?? await obj.getCategoria();
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns DetallesCuenta by ID if exist, otherwise returns null
  /// <param name='idDetalleCuenta'>Primary Key Value</param>
  /// <returns>returns DetallesCuenta if exist, otherwise returns null
  Future<DetallesCuenta> getById(int iddetallecuenta) async {
    if (iddetallecuenta == null) {
      return null;
    }
    DetallesCuenta obj;
    final data = await _mnDetallesCuenta.getById(iddetallecuenta);
    if (data.length != 0) {
      obj = DetallesCuenta.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (DetallesCuenta) object. If the idDetalleCuenta field is null, saves as a new record and returns new idDetalleCuenta, if idDetalleCuenta is not null then updates record

  /// <returns>Returns idDetalleCuenta
  Future<int> save() async {
    if (idDetalleCuenta == null || idDetalleCuenta == 0) {
      idDetalleCuenta = await _mnDetallesCuenta.insert(this);
    } else {
      idDetalleCuenta = await _upsert();
    }

    return idDetalleCuenta;
  }

  /// saveAs DetallesCuenta. Returns a new Primary Key value of DetallesCuenta

  /// <returns>Returns a new Primary Key value of DetallesCuenta
  Future<int> saveAs() async {
    idDetalleCuenta = null;

    return save();
  }

  /// saveAll method saves the sent List<DetallesCuenta> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<DetallesCuenta> detallescuentas) async {
    final results = _mnDetallesCuenta.saveAll(
        'INSERT OR REPLACE INTO detallesCuenta (idDetalleCuenta,  descripcion, fecha, monto, saldoEnFecha, tipoTransaccion, cuentasIdCuenta, categoriasIdCategoria,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
        detallescuentas);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns idDetalleCuenta
  Future<int> _upsert() async {
    try {
      if (await _mnDetallesCuenta.rawInsert(
              'INSERT OR REPLACE INTO detallesCuenta (idDetalleCuenta,  descripcion, fecha, monto, saldoEnFecha, tipoTransaccion, cuentasIdCuenta, categoriasIdCategoria,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
              [
                idDetalleCuenta,
                descripcion,
                fecha,
                monto,
                saldoEnFecha,
                tipoTransaccion,
                cuentasIdCuenta,
                categoriasIdCategoria,
                isDeleted
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'DetallesCuenta idDetalleCuenta=$idDetalleCuenta updated successfuly');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'DetallesCuenta idDetalleCuenta=$idDetalleCuenta did not update');
      }
      return idDetalleCuenta;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'DetallesCuenta Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<DetallesCuenta>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(
      List<DetallesCuenta> detallescuentas) async {
    final results = await _mnDetallesCuenta.rawInsertAll(
        'INSERT OR REPLACE INTO detallesCuenta (idDetalleCuenta,  descripcion, fecha, monto, saldoEnFecha, tipoTransaccion, cuentasIdCuenta, categoriasIdCategoria,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
        detallescuentas);
    return results;
  }

  /// Deletes DetallesCuenta

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print(
        'SQFENTITIY: delete DetallesCuenta invoked (idDetalleCuenta=$idDetalleCuenta)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnDetallesCuenta.delete(QueryParams(
          whereString: 'idDetalleCuenta=?', whereArguments: [idDetalleCuenta]));
    } else {
      return _mnDetallesCuenta.updateBatch(
          QueryParams(
              whereString: 'idDetalleCuenta=?',
              whereArguments: [idDetalleCuenta]),
          {'isDeleted': 1});
    }
  }

  /// Recover DetallesCuenta>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print(
        'SQFENTITIY: recover DetallesCuenta invoked (idDetalleCuenta=$idDetalleCuenta)');
    {
      return _mnDetallesCuenta.updateBatch(
          QueryParams(
              whereString: 'idDetalleCuenta=?',
              whereArguments: [idDetalleCuenta]),
          {'isDeleted': 0});
    }
  }

  //private DetallesCuentaFilterBuilder _Select;
  DetallesCuentaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DetallesCuentaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  DetallesCuentaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DetallesCuentaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    monto = monto ?? 0;
    saldoEnFecha = saldoEnFecha ?? 0;
    cuentasIdCuenta = cuentasIdCuenta ?? 0;
    categoriasIdCategoria = categoriasIdCategoria ?? 0;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion detallescuenta

// region DetallesCuentaField
class DetallesCuentaField extends SearchCriteria {
  DetallesCuentaField(this.detallescuentaFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  DetallesCuentaFilterBuilder detallescuentaFB;

  DetallesCuentaField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  DetallesCuentaFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    detallescuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.EQuals, detallescuentaFB._addedBlocks)
        : setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.NotEQuals, detallescuentaFB._addedBlocks);
    _waitingNot = '';
    detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
        detallescuentaFB._addedBlocks.retVal;
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    detallescuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.EQualsOrNull, detallescuentaFB._addedBlocks)
        : setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, detallescuentaFB._addedBlocks);
    _waitingNot = '';
    detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
        detallescuentaFB._addedBlocks.retVal;
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder isNull() {
    detallescuentaFB._addedBlocks = setCriteria(
        0,
        detallescuentaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        detallescuentaFB._addedBlocks);
    _waitingNot = '';
    detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
        detallescuentaFB._addedBlocks.retVal;
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      detallescuentaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          detallescuentaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          detallescuentaFB._addedBlocks);
      _waitingNot = '';
      detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
          detallescuentaFB._addedBlocks.retVal;
    }
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      detallescuentaFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          detallescuentaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          detallescuentaFB._addedBlocks);
      _waitingNot = '';
      detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
          detallescuentaFB._addedBlocks.retVal;
      detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
          detallescuentaFB._addedBlocks.retVal;
    }
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      detallescuentaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          detallescuentaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          detallescuentaFB._addedBlocks);
      _waitingNot = '';
      detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
          detallescuentaFB._addedBlocks.retVal;
    }
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      detallescuentaFB._addedBlocks = setCriteria(
          pFirst,
          detallescuentaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          detallescuentaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        detallescuentaFB._addedBlocks = setCriteria(
            pFirst,
            detallescuentaFB.parameters,
            param,
            SqlSyntax.LessThan,
            detallescuentaFB._addedBlocks);
      } else {
        detallescuentaFB._addedBlocks = setCriteria(
            pFirst,
            detallescuentaFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            detallescuentaFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        detallescuentaFB._addedBlocks = setCriteria(
            pLast,
            detallescuentaFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            detallescuentaFB._addedBlocks);
      } else {
        detallescuentaFB._addedBlocks = setCriteria(
            pLast,
            detallescuentaFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            detallescuentaFB._addedBlocks);
      }
    }
    _waitingNot = '';
    detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
        detallescuentaFB._addedBlocks.retVal;
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    detallescuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.GreaterThan, detallescuentaFB._addedBlocks)
        : setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, detallescuentaFB._addedBlocks);
    _waitingNot = '';
    detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
        detallescuentaFB._addedBlocks.retVal;
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    detallescuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.LessThan, detallescuentaFB._addedBlocks)
        : setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, detallescuentaFB._addedBlocks);
    _waitingNot = '';
    detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
        detallescuentaFB._addedBlocks.retVal;
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    detallescuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, detallescuentaFB._addedBlocks)
        : setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.LessThan, detallescuentaFB._addedBlocks);
    _waitingNot = '';
    detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
        detallescuentaFB._addedBlocks.retVal;
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    detallescuentaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, detallescuentaFB._addedBlocks)
        : setCriteria(pValue, detallescuentaFB.parameters, param,
            SqlSyntax.GreaterThan, detallescuentaFB._addedBlocks);
    _waitingNot = '';
    detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
        detallescuentaFB._addedBlocks.retVal;
    return detallescuentaFB;
  }

  DetallesCuentaFilterBuilder inValues(dynamic pValue) {
    detallescuentaFB._addedBlocks = setCriteria(
        pValue,
        detallescuentaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        detallescuentaFB._addedBlocks);
    _waitingNot = '';
    detallescuentaFB._addedBlocks.needEndBlock[detallescuentaFB._blockIndex] =
        detallescuentaFB._addedBlocks.retVal;
    return detallescuentaFB;
  }
}
// endregion DetallesCuentaField

// region DetallesCuentaFilterBuilder
class DetallesCuentaFilterBuilder extends SearchCriteria {
  DetallesCuentaFilterBuilder(DetallesCuenta obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  DetallesCuenta _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  DetallesCuentaFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  DetallesCuentaFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  DetallesCuentaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  DetallesCuentaFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  DetallesCuentaFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  DetallesCuentaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  DetallesCuentaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  DetallesCuentaFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  DetallesCuentaFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  DetallesCuentaFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  DetallesCuentaField setField(
      DetallesCuentaField field, String colName, DbType dbtype) {
    return DetallesCuentaField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  DetallesCuentaField _idDetalleCuenta;
  DetallesCuentaField get idDetalleCuenta {
    return _idDetalleCuenta =
        setField(_idDetalleCuenta, 'idDetalleCuenta', DbType.integer);
  }

  DetallesCuentaField _descripcion;
  DetallesCuentaField get descripcion {
    return _descripcion = setField(_descripcion, 'descripcion', DbType.text);
  }

  DetallesCuentaField _fecha;
  DetallesCuentaField get fecha {
    return _fecha = setField(_fecha, 'fecha', DbType.text);
  }

  DetallesCuentaField _monto;
  DetallesCuentaField get monto {
    return _monto = setField(_monto, 'monto', DbType.real);
  }

  DetallesCuentaField _saldoEnFecha;
  DetallesCuentaField get saldoEnFecha {
    return _saldoEnFecha = setField(_saldoEnFecha, 'saldoEnFecha', DbType.real);
  }

  DetallesCuentaField _tipoTransaccion;
  DetallesCuentaField get tipoTransaccion {
    return _tipoTransaccion =
        setField(_tipoTransaccion, 'tipoTransaccion', DbType.text);
  }

  DetallesCuentaField _cuentasIdCuenta;
  DetallesCuentaField get cuentasIdCuenta {
    return _cuentasIdCuenta =
        setField(_cuentasIdCuenta, 'cuentasIdCuenta', DbType.integer);
  }

  DetallesCuentaField _categoriasIdCategoria;
  DetallesCuentaField get categoriasIdCategoria {
    return _categoriasIdCategoria = setField(
        _categoriasIdCategoria, 'categoriasIdCategoria', DbType.integer);
  }

  DetallesCuentaField _isDeleted;
  DetallesCuentaField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (DetallesCuenta._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<DetallesCuenta> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (DetallesCuenta._softDeleteActivated && !hardDelete) {
      r = await _obj._mnDetallesCuenta.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnDetallesCuenta.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover DetallesCuenta bulk invoked');
    return _obj._mnDetallesCuenta.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'idDetalleCuenta IN (SELECT idDetalleCuenta from detallesCuenta ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnDetallesCuenta.updateBatch(qparams, values);
  }

  /// This method always returns DetallesCuentaObj if exist, otherwise returns null
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<DetallesCuenta>
  Future<DetallesCuenta> toSingle(
      {bool preload = false, List<String> preloadFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnDetallesCuenta.toList(qparams);
    final data = await objFuture;
    DetallesCuenta obj;
    if (data.isNotEmpty) {
      obj = DetallesCuenta.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plCuenta')) {
          obj.plCuenta = obj.plCuenta ?? await obj.getCuenta();
        }
        if (preloadFields == null || preloadFields.contains('plCategoria')) {
          obj.plCategoria = obj.plCategoria ?? await obj.getCategoria();
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c) detallescuentaCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final detallescuentasFuture = await _obj._mnDetallesCuenta.toList(qparams);
    final int count = detallescuentasFuture[0]['CNT'] as int;
    if (detallescuentaCount != null) {
      detallescuentaCount(count);
    }
    return count;
  }

  /// This method always returns List<DetallesCuenta>.
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<DetallesCuenta>
  Future<List<DetallesCuenta>> toList(
      {bool preload = false, List<String> preloadFields}) async {
    final data = await toMapList();
    final List<DetallesCuenta> detallescuentasData =
        await DetallesCuenta.fromMapList(data, preload: preload);
    return detallescuentasData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnDetallesCuenta.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<DetallesCuenta>>
  Future<List<DropdownMenuItem<DetallesCuenta>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<DetallesCuenta>> o)
          dropDownMenu]) async {
    _buildParameters();
    final detallescuentasFuture = _obj._mnDetallesCuenta.toList(qparams);

    final data = await detallescuentasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<DetallesCuenta>> items = []
      ..add(DropdownMenuItem(
        value: DetallesCuenta(),
        child: Text('Select DetallesCuenta'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: DetallesCuenta.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['idDetalleCuenta', displayTextColumn];
    final detallescuentasFuture = _obj._mnDetallesCuenta.toList(qparams);

    final data = await detallescuentasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select DetallesCuenta'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['idDetalleCuenta'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idDetalleCuentaData = <int>[];
    qparams.selectColumns = ['idDetalleCuenta'];
    final idDetalleCuentaFuture = await _obj._mnDetallesCuenta.toList(qparams);

    final int count = idDetalleCuentaFuture.length;
    for (int i = 0; i < count; i++) {
      idDetalleCuentaData
          .add(idDetalleCuentaFuture[i]['idDetalleCuenta'] as int);
    }
    return idDetalleCuentaData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback Function(List<dynamic> o) listObject]) async {
    _buildParameters();

    final objectFuture = _obj._mnDetallesCuenta.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await DetallesCuenta.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnDetallesCuenta.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion DetallesCuentaFilterBuilder

// region DetallesCuentaFields
class DetallesCuentaFields {
  static TableField _fIdDetalleCuenta;
  static TableField get idDetalleCuenta {
    return _fIdDetalleCuenta = _fIdDetalleCuenta ??
        SqlSyntax.setField(
            _fIdDetalleCuenta, 'iddetallecuenta', DbType.integer);
  }

  static TableField _fDescripcion;
  static TableField get descripcion {
    return _fDescripcion = _fDescripcion ??
        SqlSyntax.setField(_fDescripcion, 'descripcion', DbType.text);
  }

  static TableField _fFecha;
  static TableField get fecha {
    return _fFecha =
        _fFecha ?? SqlSyntax.setField(_fFecha, 'fecha', DbType.text);
  }

  static TableField _fMonto;
  static TableField get monto {
    return _fMonto =
        _fMonto ?? SqlSyntax.setField(_fMonto, 'monto', DbType.real);
  }

  static TableField _fSaldoEnFecha;
  static TableField get saldoEnFecha {
    return _fSaldoEnFecha = _fSaldoEnFecha ??
        SqlSyntax.setField(_fSaldoEnFecha, 'saldoEnFecha', DbType.real);
  }

  static TableField _fTipoTransaccion;
  static TableField get tipoTransaccion {
    return _fTipoTransaccion = _fTipoTransaccion ??
        SqlSyntax.setField(_fTipoTransaccion, 'tipoTransaccion', DbType.text);
  }

  static TableField _fCuentasIdCuenta;
  static TableField get cuentasIdCuenta {
    return _fCuentasIdCuenta = _fCuentasIdCuenta ??
        SqlSyntax.setField(
            _fCuentasIdCuenta, 'cuentasIdCuenta', DbType.integer);
  }

  static TableField _fCategoriasIdCategoria;
  static TableField get categoriasIdCategoria {
    return _fCategoriasIdCategoria = _fCategoriasIdCategoria ??
        SqlSyntax.setField(
            _fCategoriasIdCategoria, 'categoriasIdCategoria', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion DetallesCuentaFields

//region DetallesCuentaManager
class DetallesCuentaManager extends SqfEntityProvider {
  DetallesCuentaManager()
      : super(DbComplex(), tableName: _tableName, colId: _colId);
  static String _tableName = 'detallesCuenta';
  static String _colId = 'idDetalleCuenta';
}

//endregion DetallesCuentaManager
// region Meta
class Meta {
  Meta(
      {this.idMeta,
      this.descripcion,
      this.fechaInicio,
      this.fechaFin,
      this.montoInicial,
      this.montoFinal,
      this.color,
      this.icono,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Meta.withFields(
      this.descripcion,
      this.fechaInicio,
      this.fechaFin,
      this.montoInicial,
      this.montoFinal,
      this.color,
      this.icono,
      this.isDeleted) {
    _setDefaultValues();
  }
  Meta.withId(
      this.idMeta,
      this.descripcion,
      this.fechaInicio,
      this.fechaFin,
      this.montoInicial,
      this.montoFinal,
      this.color,
      this.icono,
      this.isDeleted) {
    _setDefaultValues();
  }
  Meta.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    idMeta = o['idMeta'] as int;
    if (o['descripcion'] != null) descripcion = o['descripcion'] as String;
    if (o['fechaInicio'] != null) fechaInicio = o['fechaInicio'] as String;
    if (o['fechaFin'] != null) fechaFin = o['fechaFin'] as String;
    if (o['montoInicial'] != null)
      montoInicial = double.tryParse(o['montoInicial'].toString());
    if (o['montoFinal'] != null)
      montoFinal = double.tryParse(o['montoFinal'].toString());
    if (o['color'] != null) color = o['color'] as String;
    if (o['icono'] != null) icono = o['icono'] as String;
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Meta)
  int idMeta;
  String descripcion;
  String fechaInicio;
  String fechaFin;
  double montoInicial;
  double montoFinal;
  String color;
  String icono;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Meta)

// COLLECTIONS & VIRTUALS (Meta)
  /// to load children of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  List<DetallesMeta> plDetallesMetas;

  /// get DetallesMeta(s) filtered by metasIdMeta=idMeta
  DetallesMetaFilterBuilder getDetallesMetas(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DetallesMeta()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .metasIdMeta
        .equals(idMeta)
        .and;
  }
// END COLLECTIONS & VIRTUALS (Meta)

  static const bool _softDeleteActivated = true;
  MetaManager __mnMeta;

  MetaManager get _mnMeta {
    return __mnMeta = __mnMeta ?? MetaManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = <String, dynamic>{};
    if (idMeta != null) {
      map['idMeta'] = idMeta;
    }
    if (descripcion != null) {
      map['descripcion'] = descripcion;
    }

    if (fechaInicio != null) {
      map['fechaInicio'] = fechaInicio;
    }

    if (fechaFin != null) {
      map['fechaFin'] = fechaFin;
    }

    if (montoInicial != null) {
      map['montoInicial'] = montoInicial;
    }

    if (montoFinal != null) {
      map['montoFinal'] = montoFinal;
    }

    if (color != null) {
      map['color'] = color;
    }

    if (icono != null) {
      map['icono'] = icono;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = <String, dynamic>{};
    if (idMeta != null) {
      map['idMeta'] = idMeta;
    }
    if (descripcion != null) {
      map['descripcion'] = descripcion;
    }

    if (fechaInicio != null) {
      map['fechaInicio'] = fechaInicio;
    }

    if (fechaFin != null) {
      map['fechaFin'] = fechaFin;
    }

    if (montoInicial != null) {
      map['montoInicial'] = montoInicial;
    }

    if (montoFinal != null) {
      map['montoFinal'] = montoFinal;
    }

    if (color != null) {
      map['color'] = color;
    }

    if (icono != null) {
      map['icono'] = icono;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Meta)
    if (!forQuery) {
      map['DetallesMetas'] = await getDetallesMetas().toMapList();
    }
// END COLLECTIONS (Meta)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      idMeta,
      descripcion,
      fechaInicio,
      fechaFin,
      montoInicial,
      montoFinal,
      color,
      icono,
      isDeleted
    ];
  }

  static Future<List<Meta>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Meta.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Meta>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Meta>[];
    try {
      objList = list
          .map((meta) => Meta.fromMap(meta as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Meta.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<Meta>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await Meta.fromMapList(data);
    } 
    */

  static Future<List<Meta>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields}) async {
    final List<Meta> objList = <Meta>[];
    for (final map in data) {
      final obj = Meta.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null ||
            preloadFields.contains('plDetallesMetas')) {
          obj.plDetallesMetas =
              obj.plDetallesMetas ?? await obj.getDetallesMetas().toList();
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Meta by ID if exist, otherwise returns null
  /// <param name='idMeta'>Primary Key Value</param>
  /// <returns>returns Meta if exist, otherwise returns null
  Future<Meta> getById(int idmeta) async {
    if (idmeta == null) {
      return null;
    }
    Meta obj;
    final data = await _mnMeta.getById(idmeta);
    if (data.length != 0) {
      obj = Meta.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Meta) object. If the idMeta field is null, saves as a new record and returns new idMeta, if idMeta is not null then updates record

  /// <returns>Returns idMeta
  Future<int> save() async {
    if (idMeta == null || idMeta == 0) {
      idMeta = await _mnMeta.insert(this);
    } else {
      idMeta = await _upsert();
    }

    return idMeta;
  }

  /// saveAs Meta. Returns a new Primary Key value of Meta

  /// <returns>Returns a new Primary Key value of Meta
  Future<int> saveAs() async {
    idMeta = null;

    return save();
  }

  /// saveAll method saves the sent List<Meta> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Meta> metas) async {
    final results = _mnMeta.saveAll(
        'INSERT OR REPLACE INTO metas (idMeta,  descripcion, fechaInicio, fechaFin, montoInicial, montoFinal, color, icono,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
        metas);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns idMeta
  Future<int> _upsert() async {
    try {
      if (await _mnMeta.rawInsert(
              'INSERT OR REPLACE INTO metas (idMeta,  descripcion, fechaInicio, fechaFin, montoInicial, montoFinal, color, icono,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
              [
                idMeta,
                descripcion,
                fechaInicio,
                fechaFin,
                montoInicial,
                montoFinal,
                color,
                icono,
                isDeleted
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Meta idMeta=$idMeta updated successfuly');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Meta idMeta=$idMeta did not update');
      }
      return idMeta;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Meta Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Meta>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Meta> metas) async {
    final results = await _mnMeta.rawInsertAll(
        'INSERT OR REPLACE INTO metas (idMeta,  descripcion, fechaInicio, fechaFin, montoInicial, montoFinal, color, icono,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?)',
        metas);
    return results;
  }

  /// Deletes Meta

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Meta invoked (idMeta=$idMeta)');
    var result = BoolResult();
    {
      result = await DetallesMeta()
          .select()
          .metasIdMeta
          .equals(idMeta)
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnMeta.delete(
          QueryParams(whereString: 'idMeta=?', whereArguments: [idMeta]));
    } else {
      return _mnMeta.updateBatch(
          QueryParams(whereString: 'idMeta=?', whereArguments: [idMeta]),
          {'isDeleted': 1});
    }
  }

  /// Recover Meta>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Meta invoked (idMeta=$idMeta)');
    var result = BoolResult();
    if (recoverChilds) {
      result = await DetallesMeta()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .metasIdMeta
          .equals(idMeta)
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnMeta.updateBatch(
          QueryParams(whereString: 'idMeta=?', whereArguments: [idMeta]),
          {'isDeleted': 0});
    }
  }

  //private MetaFilterBuilder _Select;
  MetaFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return MetaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  MetaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return MetaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    montoInicial = montoInicial ?? 0;
    montoFinal = montoFinal ?? 0;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion meta

// region MetaField
class MetaField extends SearchCriteria {
  MetaField(this.metaFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  MetaFilterBuilder metaFB;

  MetaField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  MetaFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    metaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metaFB.parameters, param, SqlSyntax.EQuals,
            metaFB._addedBlocks)
        : setCriteria(pValue, metaFB.parameters, param, SqlSyntax.NotEQuals,
            metaFB._addedBlocks);
    _waitingNot = '';
    metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
        metaFB._addedBlocks.retVal;
    return metaFB;
  }

  MetaFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    metaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metaFB.parameters, param, SqlSyntax.EQualsOrNull,
            metaFB._addedBlocks)
        : setCriteria(pValue, metaFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, metaFB._addedBlocks);
    _waitingNot = '';
    metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
        metaFB._addedBlocks.retVal;
    return metaFB;
  }

  MetaFilterBuilder isNull() {
    metaFB._addedBlocks = setCriteria(
        0,
        metaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        metaFB._addedBlocks);
    _waitingNot = '';
    metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
        metaFB._addedBlocks.retVal;
    return metaFB;
  }

  MetaFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      metaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          metaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          metaFB._addedBlocks);
      _waitingNot = '';
      metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
          metaFB._addedBlocks.retVal;
    }
    return metaFB;
  }

  MetaFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      metaFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          metaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          metaFB._addedBlocks);
      _waitingNot = '';
      metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
          metaFB._addedBlocks.retVal;
      metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
          metaFB._addedBlocks.retVal;
    }
    return metaFB;
  }

  MetaFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      metaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          metaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          metaFB._addedBlocks);
      _waitingNot = '';
      metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
          metaFB._addedBlocks.retVal;
    }
    return metaFB;
  }

  MetaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      metaFB._addedBlocks = setCriteria(
          pFirst,
          metaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          metaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        metaFB._addedBlocks = setCriteria(pFirst, metaFB.parameters, param,
            SqlSyntax.LessThan, metaFB._addedBlocks);
      } else {
        metaFB._addedBlocks = setCriteria(pFirst, metaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, metaFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        metaFB._addedBlocks = setCriteria(pLast, metaFB.parameters, param,
            SqlSyntax.GreaterThan, metaFB._addedBlocks);
      } else {
        metaFB._addedBlocks = setCriteria(pLast, metaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, metaFB._addedBlocks);
      }
    }
    _waitingNot = '';
    metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
        metaFB._addedBlocks.retVal;
    return metaFB;
  }

  MetaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    metaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metaFB.parameters, param, SqlSyntax.GreaterThan,
            metaFB._addedBlocks)
        : setCriteria(pValue, metaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, metaFB._addedBlocks);
    _waitingNot = '';
    metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
        metaFB._addedBlocks.retVal;
    return metaFB;
  }

  MetaFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    metaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metaFB.parameters, param, SqlSyntax.LessThan,
            metaFB._addedBlocks)
        : setCriteria(pValue, metaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, metaFB._addedBlocks);
    _waitingNot = '';
    metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
        metaFB._addedBlocks.retVal;
    return metaFB;
  }

  MetaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    metaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, metaFB._addedBlocks)
        : setCriteria(pValue, metaFB.parameters, param, SqlSyntax.LessThan,
            metaFB._addedBlocks);
    _waitingNot = '';
    metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
        metaFB._addedBlocks.retVal;
    return metaFB;
  }

  MetaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    metaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, metaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, metaFB._addedBlocks)
        : setCriteria(pValue, metaFB.parameters, param, SqlSyntax.GreaterThan,
            metaFB._addedBlocks);
    _waitingNot = '';
    metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
        metaFB._addedBlocks.retVal;
    return metaFB;
  }

  MetaFilterBuilder inValues(dynamic pValue) {
    metaFB._addedBlocks = setCriteria(
        pValue,
        metaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        metaFB._addedBlocks);
    _waitingNot = '';
    metaFB._addedBlocks.needEndBlock[metaFB._blockIndex] =
        metaFB._addedBlocks.retVal;
    return metaFB;
  }
}
// endregion MetaField

// region MetaFilterBuilder
class MetaFilterBuilder extends SearchCriteria {
  MetaFilterBuilder(Meta obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Meta _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  MetaFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  MetaFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  MetaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  MetaFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  MetaFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  MetaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  MetaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  MetaFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  MetaFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  MetaFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  MetaField setField(MetaField field, String colName, DbType dbtype) {
    return MetaField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  MetaField _idMeta;
  MetaField get idMeta {
    return _idMeta = setField(_idMeta, 'idMeta', DbType.integer);
  }

  MetaField _descripcion;
  MetaField get descripcion {
    return _descripcion = setField(_descripcion, 'descripcion', DbType.text);
  }

  MetaField _fechaInicio;
  MetaField get fechaInicio {
    return _fechaInicio = setField(_fechaInicio, 'fechaInicio', DbType.text);
  }

  MetaField _fechaFin;
  MetaField get fechaFin {
    return _fechaFin = setField(_fechaFin, 'fechaFin', DbType.text);
  }

  MetaField _montoInicial;
  MetaField get montoInicial {
    return _montoInicial = setField(_montoInicial, 'montoInicial', DbType.real);
  }

  MetaField _montoFinal;
  MetaField get montoFinal {
    return _montoFinal = setField(_montoFinal, 'montoFinal', DbType.real);
  }

  MetaField _color;
  MetaField get color {
    return _color = setField(_color, 'color', DbType.text);
  }

  MetaField _icono;
  MetaField get icono {
    return _icono = setField(_icono, 'icono', DbType.text);
  }

  MetaField _isDeleted;
  MetaField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Meta._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Meta> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    final detallesMetasBymetasIdMetaidList = await toListPrimaryKey(false);
    await DetallesMeta()
        .select()
        .metasIdMeta
        .inValues(detallesMetasBymetasIdMetaidList)
        .delete(hardDelete);

    if (Meta._softDeleteActivated && !hardDelete) {
      r = await _obj._mnMeta.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnMeta.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Meta bulk invoked');
    final detallesMetasBymetasIdMetaidList = await toListPrimaryKey(false);
    await DetallesMeta()
        .select(getIsDeleted: true)
        .isDeleted
        .equals(true)
        .and
        .metasIdMeta
        .inValues(detallesMetasBymetasIdMetaidList)
        .update({'isDeleted': 0});
    return _obj._mnMeta.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'idMeta IN (SELECT idMeta from metas ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnMeta.updateBatch(qparams, values);
  }

  /// This method always returns MetaObj if exist, otherwise returns null
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Meta>
  Future<Meta> toSingle(
      {bool preload = false, List<String> preloadFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnMeta.toList(qparams);
    final data = await objFuture;
    Meta obj;
    if (data.isNotEmpty) {
      obj = Meta.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null ||
            preloadFields.contains('plDetallesMetas')) {
          obj.plDetallesMetas =
              obj.plDetallesMetas ?? await obj.getDetallesMetas().toList();
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) metaCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final metasFuture = await _obj._mnMeta.toList(qparams);
    final int count = metasFuture[0]['CNT'] as int;
    if (metaCount != null) {
      metaCount(count);
    }
    return count;
  }

  /// This method always returns List<Meta>.
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Meta>
  Future<List<Meta>> toList(
      {bool preload = false, List<String> preloadFields}) async {
    final data = await toMapList();
    final List<Meta> metasData = await Meta.fromMapList(data, preload: preload);
    return metasData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnMeta.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Meta>>
  Future<List<DropdownMenuItem<Meta>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Meta>> o)
          dropDownMenu]) async {
    _buildParameters();
    final metasFuture = _obj._mnMeta.toList(qparams);

    final data = await metasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Meta>> items = []..add(DropdownMenuItem(
        value: Meta(),
        child: Text('Select Meta'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Meta.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['idMeta', displayTextColumn];
    final metasFuture = _obj._mnMeta.toList(qparams);

    final data = await metasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Meta'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['idMeta'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idMetaData = <int>[];
    qparams.selectColumns = ['idMeta'];
    final idMetaFuture = await _obj._mnMeta.toList(qparams);

    final int count = idMetaFuture.length;
    for (int i = 0; i < count; i++) {
      idMetaData.add(idMetaFuture[i]['idMeta'] as int);
    }
    return idMetaData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback Function(List<dynamic> o) listObject]) async {
    _buildParameters();

    final objectFuture = _obj._mnMeta.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Meta.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnMeta.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MetaFilterBuilder

// region MetaFields
class MetaFields {
  static TableField _fIdMeta;
  static TableField get idMeta {
    return _fIdMeta =
        _fIdMeta ?? SqlSyntax.setField(_fIdMeta, 'idmeta', DbType.integer);
  }

  static TableField _fDescripcion;
  static TableField get descripcion {
    return _fDescripcion = _fDescripcion ??
        SqlSyntax.setField(_fDescripcion, 'descripcion', DbType.text);
  }

  static TableField _fFechaInicio;
  static TableField get fechaInicio {
    return _fFechaInicio = _fFechaInicio ??
        SqlSyntax.setField(_fFechaInicio, 'fechaInicio', DbType.text);
  }

  static TableField _fFechaFin;
  static TableField get fechaFin {
    return _fFechaFin =
        _fFechaFin ?? SqlSyntax.setField(_fFechaFin, 'fechaFin', DbType.text);
  }

  static TableField _fMontoInicial;
  static TableField get montoInicial {
    return _fMontoInicial = _fMontoInicial ??
        SqlSyntax.setField(_fMontoInicial, 'montoInicial', DbType.real);
  }

  static TableField _fMontoFinal;
  static TableField get montoFinal {
    return _fMontoFinal = _fMontoFinal ??
        SqlSyntax.setField(_fMontoFinal, 'montoFinal', DbType.real);
  }

  static TableField _fColor;
  static TableField get color {
    return _fColor =
        _fColor ?? SqlSyntax.setField(_fColor, 'color', DbType.text);
  }

  static TableField _fIcono;
  static TableField get icono {
    return _fIcono =
        _fIcono ?? SqlSyntax.setField(_fIcono, 'icono', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion MetaFields

//region MetaManager
class MetaManager extends SqfEntityProvider {
  MetaManager() : super(DbComplex(), tableName: _tableName, colId: _colId);
  static String _tableName = 'metas';
  static String _colId = 'idMeta';
}

//endregion MetaManager
// region DetallesMeta
class DetallesMeta {
  DetallesMeta(
      {this.idDetalleMeta,
      this.fecha,
      this.monto,
      this.metasIdMeta,
      this.isDeleted}) {
    _setDefaultValues();
  }
  DetallesMeta.withFields(
      this.fecha, this.monto, this.metasIdMeta, this.isDeleted) {
    _setDefaultValues();
  }
  DetallesMeta.withId(this.idDetalleMeta, this.fecha, this.monto,
      this.metasIdMeta, this.isDeleted) {
    _setDefaultValues();
  }
  DetallesMeta.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    idDetalleMeta = o['idDetalleMeta'] as int;
    if (o['fecha'] != null) fecha = o['fecha'] as String;
    if (o['monto'] != null) monto = double.tryParse(o['monto'].toString());
    metasIdMeta = o['metasIdMeta'] as int;

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plMeta = o['meta'] != null
        ? Meta.fromMap(o['meta'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (DetallesMeta)
  int idDetalleMeta;
  String fecha;
  double monto;
  int metasIdMeta;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (DetallesMeta)

// RELATIONSHIPS (DetallesMeta)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  Meta plMeta;

  /// get Meta By MetasIdMeta
  Future<Meta> getMeta() async {
    final _obj = await Meta().getById(metasIdMeta);
    return _obj;
  }
  // END RELATIONSHIPS (DetallesMeta)

  static const bool _softDeleteActivated = true;
  DetallesMetaManager __mnDetallesMeta;

  DetallesMetaManager get _mnDetallesMeta {
    return __mnDetallesMeta = __mnDetallesMeta ?? DetallesMetaManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = <String, dynamic>{};
    if (idDetalleMeta != null) {
      map['idDetalleMeta'] = idDetalleMeta;
    }
    if (fecha != null) {
      map['fecha'] = fecha;
    }

    if (monto != null) {
      map['monto'] = monto;
    }

    if (metasIdMeta != null) {
      map['metasIdMeta'] = metasIdMeta;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = <String, dynamic>{};
    if (idDetalleMeta != null) {
      map['idDetalleMeta'] = idDetalleMeta;
    }
    if (fecha != null) {
      map['fecha'] = fecha;
    }

    if (monto != null) {
      map['monto'] = monto;
    }

    if (metasIdMeta != null) {
      map['metasIdMeta'] = metasIdMeta;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [idDetalleMeta, fecha, monto, metasIdMeta, isDeleted];
  }

  static Future<List<DetallesMeta>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR DetallesMeta.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<DetallesMeta>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <DetallesMeta>[];
    try {
      objList = list
          .map((detallesmeta) =>
              DetallesMeta.fromMap(detallesmeta as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR DetallesMeta.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<DetallesMeta>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await DetallesMeta.fromMapList(data);
    } 
    */

  static Future<List<DetallesMeta>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields}) async {
    final List<DetallesMeta> objList = <DetallesMeta>[];
    for (final map in data) {
      final obj = DetallesMeta.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plMeta')) {
          obj.plMeta = obj.plMeta ?? await obj.getMeta();
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns DetallesMeta by ID if exist, otherwise returns null
  /// <param name='idDetalleMeta'>Primary Key Value</param>
  /// <returns>returns DetallesMeta if exist, otherwise returns null
  Future<DetallesMeta> getById(int iddetallemeta) async {
    if (iddetallemeta == null) {
      return null;
    }
    DetallesMeta obj;
    final data = await _mnDetallesMeta.getById(iddetallemeta);
    if (data.length != 0) {
      obj = DetallesMeta.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (DetallesMeta) object. If the idDetalleMeta field is null, saves as a new record and returns new idDetalleMeta, if idDetalleMeta is not null then updates record

  /// <returns>Returns idDetalleMeta
  Future<int> save() async {
    if (idDetalleMeta == null || idDetalleMeta == 0) {
      idDetalleMeta = await _mnDetallesMeta.insert(this);
    } else {
      idDetalleMeta = await _upsert();
    }

    return idDetalleMeta;
  }

  /// saveAs DetallesMeta. Returns a new Primary Key value of DetallesMeta

  /// <returns>Returns a new Primary Key value of DetallesMeta
  Future<int> saveAs() async {
    idDetalleMeta = null;

    return save();
  }

  /// saveAll method saves the sent List<DetallesMeta> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<DetallesMeta> detallesmetas) async {
    final results = _mnDetallesMeta.saveAll(
        'INSERT OR REPLACE INTO detallesMetas (idDetalleMeta,  fecha, monto, metasIdMeta,isDeleted)  VALUES (?,?,?,?,?)',
        detallesmetas);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns idDetalleMeta
  Future<int> _upsert() async {
    try {
      if (await _mnDetallesMeta.rawInsert(
              'INSERT OR REPLACE INTO detallesMetas (idDetalleMeta,  fecha, monto, metasIdMeta,isDeleted)  VALUES (?,?,?,?,?)',
              [idDetalleMeta, fecha, monto, metasIdMeta, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage:
                'DetallesMeta idDetalleMeta=$idDetalleMeta updated successfuly');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage:
                'DetallesMeta idDetalleMeta=$idDetalleMeta did not update');
      }
      return idDetalleMeta;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'DetallesMeta Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<DetallesMeta>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<DetallesMeta> detallesmetas) async {
    final results = await _mnDetallesMeta.rawInsertAll(
        'INSERT OR REPLACE INTO detallesMetas (idDetalleMeta,  fecha, monto, metasIdMeta,isDeleted)  VALUES (?,?,?,?,?)',
        detallesmetas);
    return results;
  }

  /// Deletes DetallesMeta

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print(
        'SQFENTITIY: delete DetallesMeta invoked (idDetalleMeta=$idDetalleMeta)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnDetallesMeta.delete(QueryParams(
          whereString: 'idDetalleMeta=?', whereArguments: [idDetalleMeta]));
    } else {
      return _mnDetallesMeta.updateBatch(
          QueryParams(
              whereString: 'idDetalleMeta=?', whereArguments: [idDetalleMeta]),
          {'isDeleted': 1});
    }
  }

  /// Recover DetallesMeta>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print(
        'SQFENTITIY: recover DetallesMeta invoked (idDetalleMeta=$idDetalleMeta)');
    {
      return _mnDetallesMeta.updateBatch(
          QueryParams(
              whereString: 'idDetalleMeta=?', whereArguments: [idDetalleMeta]),
          {'isDeleted': 0});
    }
  }

  //private DetallesMetaFilterBuilder _Select;
  DetallesMetaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DetallesMetaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  DetallesMetaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return DetallesMetaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    monto = monto ?? 0;
    metasIdMeta = metasIdMeta ?? 0;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion detallesmeta

// region DetallesMetaField
class DetallesMetaField extends SearchCriteria {
  DetallesMetaField(this.detallesmetaFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  DetallesMetaFilterBuilder detallesmetaFB;

  DetallesMetaField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  DetallesMetaFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    detallesmetaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.EQuals, detallesmetaFB._addedBlocks)
        : setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.NotEQuals, detallesmetaFB._addedBlocks);
    _waitingNot = '';
    detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
        detallesmetaFB._addedBlocks.retVal;
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    detallesmetaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.EQualsOrNull, detallesmetaFB._addedBlocks)
        : setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, detallesmetaFB._addedBlocks);
    _waitingNot = '';
    detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
        detallesmetaFB._addedBlocks.retVal;
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder isNull() {
    detallesmetaFB._addedBlocks = setCriteria(
        0,
        detallesmetaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        detallesmetaFB._addedBlocks);
    _waitingNot = '';
    detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
        detallesmetaFB._addedBlocks.retVal;
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      detallesmetaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          detallesmetaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          detallesmetaFB._addedBlocks);
      _waitingNot = '';
      detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
          detallesmetaFB._addedBlocks.retVal;
    }
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      detallesmetaFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          detallesmetaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          detallesmetaFB._addedBlocks);
      _waitingNot = '';
      detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
          detallesmetaFB._addedBlocks.retVal;
      detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
          detallesmetaFB._addedBlocks.retVal;
    }
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      detallesmetaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          detallesmetaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          detallesmetaFB._addedBlocks);
      _waitingNot = '';
      detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
          detallesmetaFB._addedBlocks.retVal;
    }
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      detallesmetaFB._addedBlocks = setCriteria(
          pFirst,
          detallesmetaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          detallesmetaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        detallesmetaFB._addedBlocks = setCriteria(
            pFirst,
            detallesmetaFB.parameters,
            param,
            SqlSyntax.LessThan,
            detallesmetaFB._addedBlocks);
      } else {
        detallesmetaFB._addedBlocks = setCriteria(
            pFirst,
            detallesmetaFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            detallesmetaFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        detallesmetaFB._addedBlocks = setCriteria(
            pLast,
            detallesmetaFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            detallesmetaFB._addedBlocks);
      } else {
        detallesmetaFB._addedBlocks = setCriteria(
            pLast,
            detallesmetaFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            detallesmetaFB._addedBlocks);
      }
    }
    _waitingNot = '';
    detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
        detallesmetaFB._addedBlocks.retVal;
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    detallesmetaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.GreaterThan, detallesmetaFB._addedBlocks)
        : setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, detallesmetaFB._addedBlocks);
    _waitingNot = '';
    detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
        detallesmetaFB._addedBlocks.retVal;
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    detallesmetaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.LessThan, detallesmetaFB._addedBlocks)
        : setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, detallesmetaFB._addedBlocks);
    _waitingNot = '';
    detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
        detallesmetaFB._addedBlocks.retVal;
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    detallesmetaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, detallesmetaFB._addedBlocks)
        : setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.LessThan, detallesmetaFB._addedBlocks);
    _waitingNot = '';
    detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
        detallesmetaFB._addedBlocks.retVal;
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    detallesmetaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, detallesmetaFB._addedBlocks)
        : setCriteria(pValue, detallesmetaFB.parameters, param,
            SqlSyntax.GreaterThan, detallesmetaFB._addedBlocks);
    _waitingNot = '';
    detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
        detallesmetaFB._addedBlocks.retVal;
    return detallesmetaFB;
  }

  DetallesMetaFilterBuilder inValues(dynamic pValue) {
    detallesmetaFB._addedBlocks = setCriteria(
        pValue,
        detallesmetaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        detallesmetaFB._addedBlocks);
    _waitingNot = '';
    detallesmetaFB._addedBlocks.needEndBlock[detallesmetaFB._blockIndex] =
        detallesmetaFB._addedBlocks.retVal;
    return detallesmetaFB;
  }
}
// endregion DetallesMetaField

// region DetallesMetaFilterBuilder
class DetallesMetaFilterBuilder extends SearchCriteria {
  DetallesMetaFilterBuilder(DetallesMeta obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  DetallesMeta _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  DetallesMetaFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  DetallesMetaFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  DetallesMetaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  DetallesMetaFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  DetallesMetaFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  DetallesMetaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  DetallesMetaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  DetallesMetaFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  DetallesMetaFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  DetallesMetaFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  DetallesMetaField setField(
      DetallesMetaField field, String colName, DbType dbtype) {
    return DetallesMetaField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  DetallesMetaField _idDetalleMeta;
  DetallesMetaField get idDetalleMeta {
    return _idDetalleMeta =
        setField(_idDetalleMeta, 'idDetalleMeta', DbType.integer);
  }

  DetallesMetaField _fecha;
  DetallesMetaField get fecha {
    return _fecha = setField(_fecha, 'fecha', DbType.text);
  }

  DetallesMetaField _monto;
  DetallesMetaField get monto {
    return _monto = setField(_monto, 'monto', DbType.real);
  }

  DetallesMetaField _metasIdMeta;
  DetallesMetaField get metasIdMeta {
    return _metasIdMeta = setField(_metasIdMeta, 'metasIdMeta', DbType.integer);
  }

  DetallesMetaField _isDeleted;
  DetallesMetaField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (DetallesMeta._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<DetallesMeta> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (DetallesMeta._softDeleteActivated && !hardDelete) {
      r = await _obj._mnDetallesMeta.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnDetallesMeta.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover DetallesMeta bulk invoked');
    return _obj._mnDetallesMeta.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'idDetalleMeta IN (SELECT idDetalleMeta from detallesMetas ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnDetallesMeta.updateBatch(qparams, values);
  }

  /// This method always returns DetallesMetaObj if exist, otherwise returns null
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<DetallesMeta>
  Future<DetallesMeta> toSingle(
      {bool preload = false, List<String> preloadFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnDetallesMeta.toList(qparams);
    final data = await objFuture;
    DetallesMeta obj;
    if (data.isNotEmpty) {
      obj = DetallesMeta.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plMeta')) {
          obj.plMeta = obj.plMeta ?? await obj.getMeta();
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) detallesmetaCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final detallesmetasFuture = await _obj._mnDetallesMeta.toList(qparams);
    final int count = detallesmetasFuture[0]['CNT'] as int;
    if (detallesmetaCount != null) {
      detallesmetaCount(count);
    }
    return count;
  }

  /// This method always returns List<DetallesMeta>.
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<DetallesMeta>
  Future<List<DetallesMeta>> toList(
      {bool preload = false, List<String> preloadFields}) async {
    final data = await toMapList();
    final List<DetallesMeta> detallesmetasData =
        await DetallesMeta.fromMapList(data, preload: preload);
    return detallesmetasData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnDetallesMeta.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<DetallesMeta>>
  Future<List<DropdownMenuItem<DetallesMeta>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<DetallesMeta>> o)
          dropDownMenu]) async {
    _buildParameters();
    final detallesmetasFuture = _obj._mnDetallesMeta.toList(qparams);

    final data = await detallesmetasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<DetallesMeta>> items = []..add(DropdownMenuItem(
        value: DetallesMeta(),
        child: Text('Select DetallesMeta'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: DetallesMeta.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['idDetalleMeta', displayTextColumn];
    final detallesmetasFuture = _obj._mnDetallesMeta.toList(qparams);

    final data = await detallesmetasFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select DetallesMeta'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['idDetalleMeta'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idDetalleMetaData = <int>[];
    qparams.selectColumns = ['idDetalleMeta'];
    final idDetalleMetaFuture = await _obj._mnDetallesMeta.toList(qparams);

    final int count = idDetalleMetaFuture.length;
    for (int i = 0; i < count; i++) {
      idDetalleMetaData.add(idDetalleMetaFuture[i]['idDetalleMeta'] as int);
    }
    return idDetalleMetaData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback Function(List<dynamic> o) listObject]) async {
    _buildParameters();

    final objectFuture = _obj._mnDetallesMeta.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await DetallesMeta.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnDetallesMeta.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion DetallesMetaFilterBuilder

// region DetallesMetaFields
class DetallesMetaFields {
  static TableField _fIdDetalleMeta;
  static TableField get idDetalleMeta {
    return _fIdDetalleMeta = _fIdDetalleMeta ??
        SqlSyntax.setField(_fIdDetalleMeta, 'iddetallemeta', DbType.integer);
  }

  static TableField _fFecha;
  static TableField get fecha {
    return _fFecha =
        _fFecha ?? SqlSyntax.setField(_fFecha, 'fecha', DbType.text);
  }

  static TableField _fMonto;
  static TableField get monto {
    return _fMonto =
        _fMonto ?? SqlSyntax.setField(_fMonto, 'monto', DbType.real);
  }

  static TableField _fMetasIdMeta;
  static TableField get metasIdMeta {
    return _fMetasIdMeta = _fMetasIdMeta ??
        SqlSyntax.setField(_fMetasIdMeta, 'metasIdMeta', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion DetallesMetaFields

//region DetallesMetaManager
class DetallesMetaManager extends SqfEntityProvider {
  DetallesMetaManager()
      : super(DbComplex(), tableName: _tableName, colId: _colId);
  static String _tableName = 'detallesMetas';
  static String _colId = 'idDetalleMeta';
}

//endregion DetallesMetaManager
class DbComplexSequenceManager extends SqfEntityProvider {
  DbComplexSequenceManager() : super(DbComplex());
}
// END OF ENTITIES
